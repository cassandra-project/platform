/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.Loader.setConfig({
	enabled: true
});

Ext.application({
	models: [
		'Project',
		'Scenario',
		'Installation',
		'Person',
		'Activity',
		'ActivityModel',
		'Appliance',
		'ConsumptionModel',
		'SimulationParam',
		'Run',
		'Distribution'
	],
	stores: [
		'Projects',
		'Scenarios',
		'NavigationTreeStore',
		'Installations',
		'Persons',
		'Appliances',
		'Activities',
		'ActivityModels',
		'Distributions',
		'ConsumptionModels',
		'SimulationParams',
		'Runs',
		'DayTypeStore',
		'ActmodAppliances',
		'DistributionInActivity',
		'DistrTypeStore',
		'SetupStore',
		'EnergyClassStore',
		'PersonTypesStore',
		'ApplianceTypesStore'
	],
	views: [
		'MyViewport',
		'ScenariosGrid',
		'InstallationsGrid',
		'PersonsGrid',
		'AppliancesGrid',
		'ActivitiesGrid',
		'DistributionsGrid',
		'ConsumptionModelsGrid',
		'SimulationParamsGrid',
		'RunsGrid',
		'ActivityModelsGrid',
		'ActivityModelForm',
		'RelationsGrid',
		'DistributionForm',
		'DistributionInActivityGrid',
		'DynamicGrid',
		'ScenarioForm',
		'InstallationForm',
		'ApplianceForm',
		'PersonForm',
		'ActivityForm',
		'SimulationParamsForm',
		'ActmodPropertiesForm',
		'TypesPieChart'
	],
	autoCreateViewport: true,
	name: 'C',

	createForm: function(record) {
		var breadcrumb = record.getPath('name');
		var tabs = Ext.getCmp('MainTabPanel');
		var cmpToAdd;

		if (record.get('nodeType').search('Collection') > 0 ) {
			var grid = Ext.getCmp('uiNavigationTreePanel').getCustomGrid(record.c.store);
			cmpToAdd = grid;
		}
		else {
			var myForm;
			var cur_record;
			switch(record.get('nodeType')) {
				case 'Scenario':
				cur_record = record.parentNode.c.store.getById(record.get('id'));
				myForm = C.app.getScenarioForm(cur_record);
				break;
				case 'Installation':
				cur_record = record.parentNode.c.store.getById(record.get('id'));
				myForm = C.app.getInstallationForm(cur_record);
				break;
				case 'Appliance':
				cur_record = record.parentNode.c.store.getById(record.get('id'));
				myForm = C.app.getApplianceForm(cur_record);
				break;
				case 'Person':
				cur_record = record.parentNode.c.store.getById(record.get('id'));
				myForm = C.app.getPersonForm(cur_record);
				break;
				case 'Activity':
				cur_record = record.parentNode.c.store.getById(record.get('id'));
				myForm = C.app.getActivityForm(cur_record);
				break;
				case 'ActivityModel':
				cur_record = record.parentNode.c.store.getById(record.get('id'));
				myForm = C.app.getActivityModelForm(cur_record);
				break;
				case 'Distribution':
				cur_record = record.parentNode.c.store.getById(record.get('id'));
				myForm = C.app.getDistributionForm(cur_record);
				break;
				case 'SimulationParam':
				cur_record = record.parentNode.c.store.getById(record.get('id'));
				myForm = C.app.getSimulationParamsForm(cur_record);
				break;
			}

			cmpToAdd = myForm;
		}
		cmpToAdd.setTitle(breadcrumb);
		tabs.add(cmpToAdd);
		tabs.setActiveTab(cmpToAdd);
		tabs.getActiveTab().setTitle(record.get('name'));
	},

	getScenarioForm: function(record) {
		var myFormCmp = new C.view.ScenarioForm({});

		var myForm = myFormCmp.getForm();

		myForm.loadRecord(record);

		/*var out='';
		var params = record.get('model').params;
		for (var param_key in params) {

		out = out + params[param_key].n + '{';
		var values = params[param_key].values;
		for (var value_key in values) {
		out = out + ',{ p:' + values[value_key].p + ', d:' + values[value_key].d + ', s:' + values[value_key].s + '}';
		}
		out = out + '}';
		}
		*/
		Ext.each (record.node.childNodes, function(childNode, index) {
			if(!childNode.c){
				console.info('Creating structure for node '+childNode.data.name+'.', childNode);
				childNode.c = {
					store: {} // single store, not array (?)
				};
				switch(childNode.get('nodeType')) {
					case 'InstallationsCollection':
					childNode.c.store = new C.store.Installations({
						storeId: childNode.data.nodeType+'Store-scn_id-'+childNode.parentNode.get('nodeId'),
						navigationNode: childNode
					});
					break;
					case 'SimulationParamsCollection':
					childNode.c.store = new C.store.SimulationParams({
						storeId: childNode.data.nodeType+'Store-scn_id-'+childNode.parentNode.get('nodeId'),
						navigationNode: childNode
					});
					break;
				}
				childNode.c.store.load({
					params: {
						scn_id: childNode.parentNode.get('nodeId')
					}
				});
			}
			var grid = Ext.getCmp('uiNavigationTreePanel').getCustomGrid(childNode.c.store);
			grid.setTitle(childNode.get('name'));
			myFormCmp.insert(index + 1, grid);
		});
		myPersonTypesStore = new C.store.PersonTypesStore({});
		myPersonTypesStore.load({
			params: {
				scn_id: record.node.get('nodeId')
			}
		});
		myPersonPie = new C.view.TypesPieChart({store: myPersonTypesStore});
		myFormCmp.add(myPersonPie);
		console.info(record);
		return myFormCmp;
	},

	getActivityModelForm: function(record) {
		var myFormCmp = new C.view.ActivityModelForm({});

		var gridStore = new C.store.ActmodAppliances();
		var grid = new C.view.RelationsGrid({store:gridStore});

		var propertiesCmp = new C.view.ActmodPropertiesForm({});
		var myForm = propertiesCmp.getForm();
		myForm.loadRecord(record);
		console.info(record);

		curUrl = '/cassandra/api/app?actmod_id=' + record.data._id;

		Ext.Ajax.request({
			url: curUrl,
			method: 'GET',
			scope: this,
			success: function(response, opts) {
				var o = Ext.decode(response.responseText);
				gridStore.loadData(o.data, true);
			}
		});
		/*
		if (record.get('duration')) {
		Ext.Ajax.request({
		url: '/cassandra/api/distr/' + record.get('duration'),
		method: 'GET',
		scope: this,
		success: function(response, opts) {
		var o = Ext.decode(response.responseText);
		myForm.setValues({ parameter1: JSON.stringify(o.data[0].parameters)});
		myForm.setValues({distrType1: o.data[0].distrType});
		}
		});
		}

		if (record.get('startTime')) {
		Ext.Ajax.request({
		url: '/cassandra/api/distr/' + record.get('startTime'),
		method: 'GET',
		scope: this,
		success: function(response, opts) {
		var o = Ext.decode(response.responseText);
		console.info(this, o);
		myForm.setValues({ parameter2: JSON.stringify(o.data[0].parameters)});
		myForm.setValues({distrType2: o.data[0].distrType});
		}
		});
		}

		if (record.get('repeatsNrOfTime')) {
		Ext.Ajax.request({
		url: '/cassandra/api/distr/' + record.get('repeatsNrOfTime'),
		method: 'GET',
		scope: this,
		success: function(response, opts) {
		var o = Ext.decode(response.responseText);
		myForm.setValues({ parameter3: JSON.stringify(o.data[0].parameters)});
		myForm.setValues({distrType3: o.data[0].distrType});
		}
		});
		}
		*//*
		distr_store = new C.store.Distributions({
			storeId: 'DistributionsStore-actmod_id-'+record.node.get('nodeId'),
			listeners:{
				'load': 
				function(store,records,options){console.info(record);
					Ext.each(records, function(distr_record, index){
						//if (distr_record.get('_id') == record.get('duration')distr_record.get('type') == 'duration') {
						myForm.setValues({ parameter1: JSON.stringify(record.get('parameters'))});
						myForm.setValues({distrType1: distr_record.get('distrType')});
					}
					//else if (distr_record.get('_id') == record.get('startTime')distr_record.get('type') == 'startTime') {
					myForm.setValues({ parameter2: JSON.stringify(distr_record.get('parameters'))});
					myForm.setValues({distrType2: distr_record.get('distrType')});
				}
				//else if (distr_record.get('_id') == record.get('repeatsNrOfTime')distr_record.get('type') == 'repeatsNrOfTime') {
				myForm.setValues({ parameter3: JSON.stringify(distr_record.get('parameters'))});
				myForm.setValues({distrType3: distr_record.get('distrType')});
			}
		});			
	}
	}	
});

distr_store.load({
	params: {
	actmod_id: record.node.get('nodeId')
	}
});*/
var myDurationCmp = new C.view.DistributionForm({});
var myDurationForm = myDurationCmp.getForm();
myDurationCmp.setTitle('Duration');

duration_store = new C.store.Distributions({
	listeners:{
	'load': 
	function(store,records,options){
		if (records){
			myDurationForm.loadRecord(records[0]);
			myDurationForm.setValues({ params: JSON.stringify(records[0].get('parameters')), vals: JSON.stringify(records[0].get('values')) });
		}		
	}
	}	
});
duration_store.proxy.url += '/' + record.get('duration');
duration_store.load();

var myStartCmp = new C.view.DistributionForm({});
var myStartForm = myStartCmp.getForm();
myStartCmp.setTitle('Start Time');

start_store = new C.store.Distributions({
	listeners:{
	'load': 
	function(store,records,options){
		if (records){
			myStartForm.loadRecord(records[0]);
			myStartForm.setValues({ params: JSON.stringify(records[0].get('parameters')), vals: JSON.stringify(records[0].get('values')) });

		}		
	}
	}	
});
start_store.proxy.url += '/' + record.get('startTime');
start_store.load();

var myRepeatsCmp = new C.view.DistributionForm({});
var myRepeatsForm = myRepeatsCmp.getForm();
myRepeatsCmp.setTitle('Number of Times');

repeats_store = new C.store.Distributions({
	listeners:{
	'load': 
	function(store,records,options){
		if (records){
			myRepeatsForm.loadRecord(records[0]);
			myRepeatsForm.setValues({ params: JSON.stringify(records[0].get('parameters')), vals: JSON.stringify(records[0].get('values')) });
		}
	}	
	}
});
repeats_store.proxy.url += '/' + record.get('repeatsNrOfTime');
repeats_store.load();
record.c = [{store: duration_store}, {store: start_store},  {store: repeats_store}];
propertiesCmp.getComponent('actmodFieldset').insert(6,grid);
myFormCmp.getComponent('properties_and_appliances').add(propertiesCmp);
myFormCmp.getComponent('distributionsFieldSet').add(myDurationCmp);	
myFormCmp.getComponent('distributionsFieldSet').add(myStartCmp);
myFormCmp.getComponent('distributionsFieldSet').add(myRepeatsCmp);
return myFormCmp;
	},

	launch: function() {
		C.app = this;
	},

	getInstallationForm: function(record) {
		var myFormCmp = new C.view.InstallationForm({});

		var myForm = myFormCmp.getForm();

		myForm.loadRecord(record);

		Ext.each (record.node.childNodes, function(childNode, index) {
			if(!childNode.c){
				console.info('Creating structure for node '+childNode.data.name+'.', childNode);
				childNode.c = {
					store: {} // single store, not array (?)
				};
				switch(childNode.get('nodeType')) {
					case 'PersonsCollection':
					childNode.c.store = new C.store.Persons({
						storeId: childNode.data.nodeType+'Store-inst_id-'+childNode.parentNode.get('nodeId'),
						navigationNode: childNode
					});
					break;
					case 'AppliancesCollection':
					childNode.c.store = new C.store.Appliances({
						storeId: childNode.data.nodeType+'Store-inst_id-'+childNode.parentNode.get('nodeId'),
						navigationNode: childNode
					});
					break;
				}
				childNode.c.store.load({
					params: {
						inst_id: childNode.parentNode.get('nodeId')
					}
				});
			}
			var grid = Ext.getCmp('uiNavigationTreePanel').getCustomGrid(childNode.c.store);
			grid.setTitle(childNode.get('name'));
			myFormCmp.insert(index + 1, grid);
		});

		console.info(record);
		return myFormCmp;
	},

	getApplianceForm: function(record) {
		var myFormCmp = new C.view.ApplianceForm({});

		var myForm = myFormCmp.getForm();

		myForm.loadRecord(record);

		console.info(record);

		/*curUrl = '/cassandra/api/consmod?app_id=' + record.get('_id');

		Ext.Ajax.request({
		url: curUrl,
		method: 'GET',
		scope: this,
		success: function(response, opts) {
		var o = Ext.decode(response.responseText);
		var model = o.data[0] ? JSON.stringify(o.data[0].model) : {};
		myForm.setValues({ expression: model});
		var name = o.data[0] ? o.data[0].name : '';
		myForm.setValues({ consmod_name: name});
		var description = o.data[0] ? o.data[0].description : {};
		myForm.setValues({ consmod_description: description});
		}
		});
		*/
		consmod_store = new C.store.ConsumptionModels({
			storeId: 'ConsumptionModelsStore-app_id-'+record.node.get('nodeId'),
			listeners:{
				'load': 
				function(store,records,options){
					var consmod_record = records[0];
					if (consmod_record) {
						var model = JSON.stringify(consmod_record.get('model'));
						myForm.setValues({ expression: model});
						myForm.setValues({ consmod_name: consmod_record.get('name')});
						myForm.setValues({ consmod_description: consmod_record.get('description')});
					}
				}
			}	
		});

		consmod_store.load({
			params: {
				app_id: record.node.get('nodeId')
			}
		});
		record.c = {store: consmod_store};

		console.info(consmod_store);
		return myFormCmp;
	},

	getPersonForm: function(record) {
		var myFormCmp = new C.view.PersonForm({});

		var myForm = myFormCmp.getForm();

		myForm.loadRecord(record);

		var childNode = record.node.childNodes[0];
		if(!childNode.c){
			console.info('Creating structure for node '+childNode.data.name+'.', childNode);
			childNode.c = {
				store: {} // single store, not array (?)
			};

			childNode.c.store = new C.store.Activities({
				storeId: childNode.data.nodeType+'Store-pers_id-'+childNode.parentNode.get('nodeId'),
				navigationNode: childNode
			});

			childNode.c.store.load({
				params: {
					pers_id: childNode.parentNode.get('nodeId')
				}
			});
		}

		var grid = Ext.getCmp('uiNavigationTreePanel').getCustomGrid(childNode.c.store);
		grid.setTitle(childNode.get('name'));
		myFormCmp.insert(1, grid);

		console.info(record);
		return myFormCmp;
	},

	getActivityForm: function(record) {
		var myFormCmp = new C.view.ActivityForm({});

		var myForm = myFormCmp.getForm();

		myForm.loadRecord(record);

		var childNode = record.node.childNodes[0];
		if(!childNode.c){
			console.info('Creating structure for node '+childNode.data.name+'.', childNode);
			childNode.c = {
				store: {} // single store, not array (?)
			};

			childNode.c.store = new C.store.ActivityModels({
				storeId: childNode.data.nodeType+'Store-act_id-'+childNode.parentNode.get('nodeId'),
				navigationNode: childNode
			});

			childNode.c.store.load({
				params: {
					act_id: childNode.parentNode.get('nodeId')
				}
			});
		}

		var grid = Ext.getCmp('uiNavigationTreePanel').getCustomGrid(childNode.c.store);
		grid.setTitle(childNode.get('name'));
		myFormCmp.insert(1, grid);

		console.info(record);
		return myFormCmp;
	},

	getDistributionForm: function(record) {
		var myFormCmp = new C.view.DistributionForm({});

		var myForm = myFormCmp.getForm();

		myForm.loadRecord(record);

		myForm.setValues({ params: JSON.stringify(record.get('parameters')) });
		myForm.setValues({ vals: JSON.stringify(record.get('values')) });
		console.info(record);
		return myFormCmp;
	},

	getSimulationParamsForm: function(record) {
		var myFormCmp = new C.view.SimulationParamsForm({});

		var myForm = myFormCmp.getForm();

		myForm.loadRecord(record);

		var day = record.get('calendar').dayOfMonth;
		var month = record.get('calendar').month - 1;
		var year = record.get('calendar').year;
		var calendar = (new Date(year,month,day) == 'Invalid Date') ? '' : new Date(year,month,day);
		myForm.setValues({ formCalendar:  calendar});
		console.info(record);
		return myFormCmp;
	}

});
