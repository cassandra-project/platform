/*
 * File: app/view/ApplianceForm.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.ApplianceForm', {
	extend: 'Ext.form.Panel',

	height: 442,
	autoScroll: true,
	layout: {
		align: 'center',
		type: 'vbox'
	},
	bodyPadding: 10,
	closable: false,
	title: 'My Form',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'container',
					width: 577,
					autoScroll: true,
					layout: {
						align: 'middle',
						type: 'hbox'
					},
					items: [
						{
							xtype: 'fieldset',
							height: 309,
							padding: '10px',
							width: 280,
							title: 'Properties',
							items: [
								{
									xtype: 'textfield',
									width: 246,
									name: 'name',
									fieldLabel: 'Name',
									listeners: {
										change: {
											fn: me.onTextfieldChange111111,
											scope: me
										}
									}
								},
								{
									xtype: 'textfield',
									width: 246,
									name: 'type',
									fieldLabel: 'Type'
								},
								{
									xtype: 'textareafield',
									width: 246,
									name: 'description',
									fieldLabel: 'Description'
								},
								{
									xtype: 'combobox',
									width: 246,
									name: 'energy_class',
									fieldLabel: 'Energy Class',
									displayField: 'energy_class',
									queryMode: 'local',
									store: 'EnergyClassStore',
									valueField: 'energy_class'
								},
								{
									xtype: 'numberfield',
									width: 186,
									name: 'standy_consumption',
									fieldLabel: 'Stand By',
									step: 0.01
								},
								{
									xtype: 'checkboxfield',
									name: 'base',
									fieldLabel: 'Base',
									boxLabel: '',
									inputValue: 'true',
									uncheckedValue: 'false'
								},
								{
									xtype: 'checkboxfield',
									name: 'shiftable',
									fieldLabel: 'Shiftable',
									boxLabel: '',
									inputValue: 'true',
									uncheckedValue: 'false'
								},
								{
									xtype: 'checkboxfield',
									name: 'controllable',
									fieldLabel: 'Controllable',
									boxLabel: '',
									inputValue: 'true',
									uncheckedValue: 'false'
								}
							]
						},
						{
							xtype: 'fieldset',
							margins: '0 0 0 10px',
							height: 309,
							width: 271,
							title: 'ConsumptionModel',
							items: [
								{
									xtype: 'textfield',
									margin: '10px 0',
									width: 246,
									name: 'consmod_name',
									fieldLabel: 'Name'
								},
								{
									xtype: 'textareafield',
									margin: '10px 0',
									width: 246,
									name: 'consmod_description',
									fieldLabel: 'Description'
								},
								{
									xtype: 'textareafield',
									height: 103,
									width: 242,
									name: 'expression',
									readOnly: false,
									fieldLabel: 'Expression'
								}
							]
						}
					]
				},
				{
					xtype: 'button',
					itemId: 'btn',
					margin: '10px 0',
					width: 70,
					text: 'Update',
					listeners: {
						click: {
							fn: me.onButtonClick2,
							scope: me
						}
					}
				},
				{
					xtype: 'label',
					style: 'font-size:20px;font-weight:bold;',
					text: 'Consumption Model Power'
				}
			],
			tools: [
				{
					xtype: 'tool',
					type: 'unpin',
					listeners: {
						click: {
							fn: me.onToolClick1,
							scope: me
						}
					}
				}
			]
		});

		me.callParent(arguments);
	},

	onTextfieldChange111111: function(field, newValue, oldValue, options) {
		this.setTitle(newValue);
		this.form.getRecord().node.set({'name':newValue});
	},

	onButtonClick2: function(button, e, options) {

		var myForm = this.getForm();
		var record = myForm.getRecord();
		var myConsModChartStore = this.query('chart')[0].store;

		myForm.updateRecord();

		//clear dirty record
		record.node.commit();

		if (record.isNew)
		record.isNew = false;

		var model = myForm.getFieldValues().expression;
		var name = myForm.getFieldValues().consmod_name;
		var description = myForm.getFieldValues().consmod_description;

		//update or insert consmod only if one of it's parameters is set
		if ( model || name || description) {

			if (model) {
				try {
					model = JSON.parse(model);
				}
				catch(e) {
					Ext.MessageBox.show({
						title:'Invalid input', 
						msg: 'A valid input example would be: </br>{"n":0,"params":[{"n":1,"values":[{"p":60,"d":200,"s":0}]}]}', 
						icon: Ext.MessageBox.ERROR
					});
					return false;
				}
			}
			else 
			model = {};

			var consmod_record = record.c.store.getRange()[0];
			if (consmod_record) {
				consmod_record.set({model: model, 'name': name, 'description': description});
				if (consmod_record.isNew)
				consmod_record.isNew = false;
				myConsModChartStore.removeAll();
				myConsModChartStore.load();
			}
			else {
				var currentModel = record.c.store.getProxy().getModel();
				record.c.store.insert(0, new currentModel({
					'app_id' : record.get('_id'), 
					'model': model, 
					'description': description, 
					'name': name
				})
				);
				record.c.store.on('update', function(records) {
					myConsModChartStore.proxy.url += '/' + records.data.items[0].get('_id');
					myConsModChartStore.load();
				}, null, {single:true});							  
				}

			}

			this.dirtyForm = false;

			//record.save();
	},

	onToolClick1: function(tool, e, options) {
		C.app.handleFormUnpin();
	}

});