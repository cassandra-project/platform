/*
 * File: app/view/UserLibTreePanel.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.UserLibTreePanel', {
	extend: 'Ext.tree.Panel',

	disabled: false,
	floating: false,
	frame: false,
	autoScroll: true,
	collapseDirection: 'left',
	collapsible: false,
	titleCollapse: false,
	store: 'UserLibTreeStore',
	displayField: 'name',
	folderSort: false,
	useArrows: true,

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			viewConfig: {
				frame: true,
				height: 91,
				margin: '5px 0 0 0',
				width: 200,
				loadingText: 'loading...',
				plugins: [
					Ext.create('Ext.tree.plugin.TreeViewDragDrop', {
						ptype: 'treeviewdragdrop',
						ddGroup: 'ddGlobal'
					})
				],
				listeners: {
					beforeitemmouseenter: {
						fn: me.onTreeviewBeforeItemMouseEnter,
						scope: me
					},
					itemdblclick: {
						fn: me.onTreeviewItemDblClick,
						scope: me
					},
					beforedrop: {
						fn: me.onTreedragdroppluginBeforeDrop,
						scope: me
					}
				}
			},
			listeners: {
				itemappend: {
					fn: me.onTreepanelItemAppend,
					scope: me
				},
				beforerender: {
					fn: me.onTreepanelBeforeRender,
					scope: me
				},
				afterrender: {
					fn: me.onTreepanelAfterRender,
					scope: me
				}
			}
		});

		me.callParent(arguments);
	},

	onTreedragdroppluginBeforeDrop: function(node, data, overModel, dropPosition, dropFunction, options) {
		console.info('Before node drop.', this, node, data, overModel, dropPosition, dropFunction, options);
		// TODO Rename ALL the collections to itemCollection instead of itemsCollection
		//if(overModel.raw.nodeType == data.records[0].raw.nodeType + 'sCollection'){
		var record = (data.records[0].node) ? data.records[0].node : data.records[0];
		var nodeType = record.get('nodeType');
		// Node from tree || Node from grid.
		if (nodeType + 'sCollection' == overModel.get('nodeType')){
			// record can be a lot of things, navigation record, grid row.
			// Get the actuall data from its store to skip unwanted behaviour.
			dropFunction.cancelDrop();
			var index = Ext.getStore(record.get('nodeStoreId')).findExact('_id', record.get('id'));
			var node = Ext.getStore(record.get('nodeStoreId')).getAt(index);
			// TODO Epic SWITCH-CASE statement goes here to get the *_id key for the parent.
			// ex. scenario_id in the Installation case.
			// TODO Move this epic thigie to each model as config?

			parent_idKey = '';
			switch(record.get('nodeType')){
				case 'Scenario': parent_idKey = 'project_id'; break;
				case 'SimulationParam': parent_idKey = 'scn_id'; break;
				case 'Installation': parent_idKey = 'scenario_id'; break;
				case 'Demographic': parent_idKey = 'scn_id'; break;
				case 'Person': parent_idKey = 'inst_id'; break;
				case 'Appliance': parent_idKey = 'inst_id'; break;
				case 'Activity': parent_idKey = 'pers_id'; break;
				case 'ActivityModel': parent_idKey = 'act_id'; break;
				default: return false;
			}


			if ( (!Ext.EventObject.shiftKey || record.get('nodeType') == 'Demographic' || record.get('nodeType') == 'SimulationParam' ) && (record.get('nodeType') != 'Appliance' && record.get('nodeType') != 'ActivityModel') ){

				var recordRawData = JSON.parse(JSON.stringify(node.data));
				delete recordRawData._id;
				//delete recordRawData._id;
				// TODO Make damn sure that parentId actually exists all around.
				recordRawData[parent_idKey] = overModel.get('parentId'); 
				overModel.c.store.add(recordRawData);
			}
			else {
				data.copy = true;
				var targetID = '';
				var meID = '';
				switch(record.get('nodeType')){
					case 'Scenario': targetID = 'toPrjID'; meID = 'scnID'; parent_idKey = 'prj_id'; break;
					case 'Installation': targetID = 'toScnID'; meID = 'instID'; parent_idKey = 'scn_id'; break;
					case 'Person': targetID = 'toInstID'; meID = 'persID'; break;
					case 'Activity': targetID = 'toPersID'; meID = 'actID'; break;
					case 'ActivityModel': targetID = 'toActID'; meID = 'actmodID'; break;
					case 'Appliance': targetID = 'toInstID'; meID = 'appID'; break;
					default: return false;
				}

				Ext.Ajax.request({
					url: '/cassandra/api/copy?'+meID+'='+node.get('_id')+'&'+targetID+'='+overModel.get('parentId'),
					method: 'POST',
					scope: this,
					callback: function(options, success, response) {	
						response = JSON.parse(response.responseText);
						if (response.success) {
							var params = {};
							params[parent_idKey] = overModel.get('parentId');
							overModel.removeAll();
							overModel.c.store.load( {params : params });
							Ext.sliding_box.msg('Success', JSON.stringify(response.message));
						}
						else {
							Ext.MessageBox.show({title:'Error', msg: JSON.stringify(response.errors), icon: Ext.MessageBox.ERROR, buttons: Ext.MessageBox.OK});
						}
					}
				});
			}
		}
		else {
			return false;
		}




	},

	onTreeviewBeforeItemMouseEnter: function(dataview, record, item, index, e, options) {
		//console.info('Navigation tree panel before item mouse enter.', dataview, record, item, index, e, options); 
	},

	onTreeviewItemDblClick: function(dataview, record, item, index, e, options) {
		var breadcrumb = record.getPath();
		var pathToMe =  record.get('nodeType')+':'+breadcrumb;
		var tabs = Ext.getCmp('MainTabPanel');
		var isOpen = false;
		Ext.each (tabs.items.items, function(item, index) {
			if (item.pathToMe == pathToMe) {
				tabs.setActiveTab(item);
				isOpen = true;
				return false;
			}
		});
		if (!isOpen) 
		C.app.createForm(record);

	},

	onTreepanelItemAppend: function(treepanel, node, index, options) {
		console.info('Appended new node.', node);
		node.isExpandable = function(){
			return !this.isLeaf() && (this.get('expandable') || this.hasChildNodes());
		};

	},

	onTreepanelBeforeRender: function(abstractcomponent, options) {
		console.info('Before render treepanel.', this, abstractcomponent, options);

		C.usr_id = Ext.util.Cookies.get('usr_id');
		abstractcomponent.getRootNode().data.id = C.usr_id;
		abstractcomponent.getRootNode().data.icon = "resources/icons/user.png";
		abstractcomponent.getRootNode().data.iconCls = "treeIcon";

		abstractcomponent.on('nodedragover', function(dragEvent) {
			dragEvent.cancel = true;
		});
		abstractcomponent.on(
		'beforeitemexpand',
		function(record, e){
			console.info('BEFORE EXPAND: ', this, record, e);
			if(!record.c){
				console.info('Creating structure for node '+record.data.name+'.', record);
				record.c = {
					store: {} // single store, not array (?)
				};
				switch(record.data.nodeType){
					case 'UserLibrary':
					//record.removeAll();
					console.info('Node has already been renedered');
					break;

					case 'InstallationsCollection':
					//record.removeAll();
					console.info('Creating store for installations.');
					record.c.store = new C.store.Installations({
						storeId: record.data.nodeType+'Store-scn_id-'+C.usr_id,
						navigationNode: record
					});
					record.c.store.load({
						params: {
							scn_id: C.usr_id
						}
					});
					break;


					case 'PersonsCollection':
					//record.removeAll();
					console.info('Creating store for persons.');
					record.c.store = new C.store.Persons({
						storeId: record.data.nodeType+'Store-inst_id-'+C.usr_id,
						navigationNode: record
					});
					record.c.store.load({
						params: {
							inst_id: C.usr_id
						}
					});
					break;

					case 'AppliancesCollection':
					//record.removeAll();
					console.info('Creating store for installations.');
					record.c.store = new C.store.Appliances({
						storeId: record.data.nodeType+'Store-inst_id-'+C.usr_id,
						navigationNode: record
					});
					record.c.store.load({
						params: {
							inst_id: C.usr_id
						}
					});
					break;

					case 'Person':
					//record.removeAll();
					console.info('Creating dummy nodes for person.');
					record.appendChild({
						name: 'Activities',
						nodeType: 'ActivitiesCollection',
						expanded: false,
						leaf: false,
						expandable: true,
						fakeChildren: true,
						draggable: false,
						icon: 'resources/icons/activities.png',
						iconCls: 'treeIcon'
					});
					break;

					case 'ActivitiesCollection':
					//record.removeAll();
					console.info('Creating store for activities.');
					record.c.store = new C.store.Activities({
						storeId: record.data.nodeType+'Store-pers_id-'+record.parentNode.get('nodeId'),
						navigationNode: record
					});
					record.c.store.load({
						params: {
							pers_id: record.parentNode.get('nodeId')
						}
					});
					break;
					case 'Activity':
					//record.removeAll();
					console.info('Creating dummy nodes for activity.');
					record.appendChild({
						name: 'Activity Models',
						nodeType: 'ActivityModelsCollection',
						expanded: false,
						leaf: false,
						expandable: true,
						fakeChildren: true,
						draggable: false,
						icon: 'resources/icons/activity_models.png',
						iconCls: 'treeIcon'
					});
					break;
					case 'ActivityModelsCollection':
					//record.removeAll();
					console.info('Creating store for activity models.');
					record.c.store = new C.store.ActivityModels({
						storeId: record.data.nodeType+'Store-act_id-'+record.parentNode.get('nodeId'),
						navigationNode: record
					});
					record.c.store.load({
						params: {
							act_id: record.parentNode.get('nodeId')
						}
					});
					break;

					default:
					console.error('Not sure what to do with type: '+record.nodeType);
				}
			}else{
				console.info('Node has been already rendered before.');
			}
		},
		this
		);
	},

	onTreepanelAfterRender: function(abstractcomponent, options) {
		var record = abstractcomponent.getRootNode();

		console.info('Creating dummy nodes for userlibrary.');
		record.appendChild({
			name: 'Installations',
			nodeType: 'InstallationsCollection',
			expanded: false,
			leaf: false,
			expandable: true,
			fakeChildren: true,
			draggable: false,
			icon: 'resources/icons/installations.png',
			iconCls: 'treeIcon'
		});
		record.appendChild({
			name: 'Persons',
			nodeType: 'PersonsCollection',
			expanded: false,
			leaf: false,
			expandable: true,
			fakeChildren: true,
			draggable: false,
			icon: 'resources/icons/persons.png',
			iconCls: 'treeIcon'
		});
		record.appendChild({
			name: 'Appliances',
			nodeType: 'AppliancesCollection',
			expanded: false,
			leaf: false,
			expandable: true,
			fakeChildren: true,
			draggable: false,
			icon: 'resources/icons/appliances.png',
			iconCls: 'treeIcon'
		});
	}

});