/*
 * File: app/view/DynamicGrid.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.DynamicGrid', {
	extend: 'Ext.grid.Panel',

	minHeight: 250,
	autoScroll: true,
	title: 'My Grid Panel',
	columnLines: true,
	forceFit: true,
	store: 'Scenarios',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			viewConfig: {
				overflowX: 'auto',
				overflowY: 'auto',
				loadingText: 'loading..',
				plugins: [
					Ext.create('Ext.grid.plugin.DragDrop', {
						containerScroll: true,
						ddGroup: 'ddGlobal'
					})
				],
				listeners: {
					beforedrop: {
						fn: me.onGriddragdroppluginBeforeDrop,
						scope: me
					}
				}
			},
			columns: [
				{
					xtype: 'gridcolumn',
					dataIndex: '_id',
					text: '_id'
				}
			],
			selModel: Ext.create('Ext.selection.RowModel', {
				mode: 'MULTI'
			}),
			dockedItems: [
				{
					xtype: 'toolbar',
					dock: 'top',
					width: 508,
					items: [
						{
							xtype: 'button',
							text: 'New',
							listeners: {
								click: {
									fn: me.onButtonClick,
									scope: me
								},
								beforerender: {
									fn: me.onButtonBeforeRender,
									scope: me
								}
							}
						},
						{
							xtype: 'button',
							text: 'Delete',
							listeners: {
								click: {
									fn: me.onButtonClick1,
									scope: me
								}
							}
						},
						{
							xtype: 'button',
							text: 'Edit',
							listeners: {
								click: {
									fn: me.onButtonClick11,
									scope: me
								},
								beforerender: {
									fn: me.onButtonBeforeRender1,
									scope: me
								}
							}
						},
						{
							xtype: 'button',
							hidden: true,
							text: 'Compare',
							listeners: {
								click: {
									fn: me.onButtonClick111,
									scope: me
								},
								beforerender: {
									fn: me.onButtonBeforeRender2,
									scope: me
								}
							}
						},
						{
							xtype: 'button',
							hidden: true,
							text: 'Upload file',
							listeners: {
								click: {
									fn: me.onButtonClick1111,
									scope: me
								},
								beforerender: {
									fn: me.onButtonBeforeRender21,
									scope: me
								}
							}
						},
						{
							xtype: 'button',
							hidden: true,
							text: 'Create CSN',
							listeners: {
								click: {
									fn: me.onButtonClick1112,
									scope: me
								},
								beforerender: {
									fn: me.onButtonBeforeRender22,
									scope: me
								}
							}
						}
					]
				}
			],
			listeners: {
				itemdblclick: {
					fn: me.onGridpanelItemDblClick,
					scope: me
				},
				beforerender: {
					fn: me.onGridpanelBeforeRender,
					scope: me
				},
				afterrender: {
					fn: me.onGridpanelAfterRender,
					scope: me
				}
			},
			tools: [
				{
					xtype: 'tool',
					type: 'unpin',
					listeners: {
						click: {
							fn: me.onToolClick1,
							scope: me
						}
					}
				},
				{
					xtype: 'tool',
					tooltip: 'Refresh view',
					type: 'refresh',
					listeners: {
						click: {
							fn: me.onToolClick,
							scope: me
						}
					}
				}
			]
		});

		me.callParent(arguments);
	},

	onGriddragdroppluginBeforeDrop: function(node, data, overModel, dropPosition, dropHandlers, eOpts) {
		console.info('Before drop.', this, node, data, overModel, dropPosition, dropHandlers, eOpts);
		/* NOTE
		Returning false to this event signals that the drop gesture was invalid, and if the drag proxy will
		animate back to the point from which the drag began.
		Returning 0 To this event signals that the data transfer operation should not take place, but that
		the gesture was valid, and that the repair operation should not take place.
		*/
		var record;

		// record can be a lot of things, navigation record, grid row.
		if  (data.records[0].paginationNode || data.records[0].node) {
			record = data.records[0];
			if (!record.node) {
				record.paginationNode.expand();
			}
			node = record.node;
		}
		else {
			node = data.records[0];
			record = C.app.getRecordByNode(node);
		}

		//if record belongs to Cassandra Library return false
		if (C.app.belongsToCassLib(this.store.navigationNode.store)) {
			return false;
		}


		if('C.model.'+node.get('nodeType') == this.store.model.modelName){
			dropHandlers.cancelDrop();
			var parent_id = (this.store.navigationNode.get('nodeType') == 'ProjectsCollection')?'':this.store.navigationNode.parentNode.get('id');
			parent_idKey = '';
			switch(node.get('nodeType')){
				case 'Scenario': parent_idKey = 'project_id'; break;
				case 'SimulationParam': parent_idKey = 'scn_id'; break;
				case 'Installation': parent_idKey = 'scenario_id'; break;
				case 'Pricing': parent_idKey = 'prj_id'; break;
				case 'Demographic': parent_idKey = 'scn_id'; break;
				case 'Person': parent_idKey = 'inst_id'; break;
				case 'Appliance': parent_idKey = 'inst_id'; break;
				case 'Activity': parent_idKey = 'pers_id'; break;
				case 'ActivityModel': parent_idKey = 'act_id'; break;
				default: return false;
			}

			if ( !Ext.EventObject.shiftKey && node.get('nodeType') !== 'Pricing' && node.get('nodeType') !== 'Demographic' && node.get('nodeType') !== 'SimulationParam'){
				data.copy = true;
				var targetID = '';
				var meID = '';
				switch(node.get('nodeType')){
					case 'Scenario': targetID = 'toPrjID'; meID = 'scnID'; parent_idKey = 'prj_id'; break;
					case 'Installation': targetID = 'toScnID'; meID = 'instID'; parent_idKey = 'scn_id'; break;
					case 'Person': targetID = 'toInstID'; meID = 'persID'; break;
					case 'Appliance': targetID = 'toInstID'; meID = 'appID'; break;
					case 'Activity': targetID = 'toPersID'; meID = 'actID'; break;
					case 'ActivityModel': targetID = 'toActID'; meID = 'actmodID'; break;

					default: return false;
				}

				Ext.Ajax.request({
					url: '/cassandra/api/copy?'+meID+'='+record.get('_id')+'&'+targetID+'='+parent_id,
					method: 'POST',
					scope: this,
					success: function(response, eOpts) {	
						response = JSON.parse(response.responseText);
						var params = {};
						params[parent_idKey] = parent_id;
						this.store.navigationNode.removeAll();
						this.store.load( {params : params });
						Ext.sliding_box.msg('Success', JSON.stringify(response.message));
					}
				});

			} 
			else {

				//Ext.sliding_box.msg('Drag and Drop info', 'By holding <b>Shift</b> key pressed while copying a node </br> all its childred will be copied as well');

				var dataToAdd = JSON.parse(JSON.stringify(record.data));
				delete dataToAdd._id;
				dataToAdd[parent_idKey] = parent_id;
				this.store.add(dataToAdd);

			}
			return 0;
		}
		return false;
	},

	onButtonClick: function(button, e, eOpts) {
		console.info('Add clicked.', this, button, e, eOpts);
		var parent_id = (this.store.navigationNode.get('nodeType') == 'ProjectsCollection')?'':this.store.navigationNode.parentNode.get('id');
		var inputArray = {};
		switch(this.store.navigationNode.get('nodeType')){
			case 'ProjectsCollection': inputArray = {};break;
			case 'ScenariosCollection': inputArray = {'project_id' : parent_id};break;
			case 'InstallationsCollection': inputArray = {'scenario_id' : parent_id}; break;
			case 'PricingSchemesCollection': inputArray = {'prj_id' : parent_id}; break;
			case 'DemographicsCollection': inputArray = {'scn_id' : parent_id}; break;
			case 'SimulationParamsCollection': 
			var calendar = C.app.getCalendar( new Date());
			inputArray = {'scn_id' : parent_id, calendar: calendar}; 
			break;
			case 'PersonsCollection': inputArray = {'inst_id' : parent_id}; break;
			case 'AppliancesCollection': inputArray = {'inst_id': parent_id}; break;
			case 'ActivitiesCollection': inputArray = {'pers_id': parent_id}; break;
			case 'ActivityModelsCollection': inputArray = {'act_id' : parent_id}; break;
			default: return false;
		}
		var currentModel = this.store.getProxy().getModel();
		var cur_record = new currentModel(inputArray);

		this.store.add(cur_record);



		//this.plugins[0].startEdit(0, 0);




	},

	onButtonBeforeRender: function(component, eOpts) {
		if (this.store.model.getName() == "C.model.Run" || this.store.model.getName() == "C.model.Csn")
		component.hide();
	},

	onButtonClick1: function(button, e, eOpts) {
		console.info('Delete clicked.', this, button, e, eOpts);

		var tabs = Ext.getCmp('MainTabPanel');
		var selections = this.getView().getSelectionModel().getSelection();

		if (selections) {

			//check if there are open tabs with selections and if yes, close them
			Ext.each(selections, function(selection, index) {
				var node = selection.node;
				if (node) {
					var pathToMe =  node.get('nodeType')+':'+node.getPath();
					Ext.each (tabs.items.items, function(item, index) {
						if (item.pathToMe == pathToMe) {
							item.close();
							return false;
						}
					});
				}
			});

			this.store.remove(selections);
		}
	},

	onButtonClick11: function(button, e, eOpts) {
		console.info('Edit clicked.', this, button, e, eOpts);

		var selections = this.getView().getSelectionModel().getSelection();
		if (selections) {
			Ext.each(selections, function(record){
				if (!record.node && record.paginationNode)
				record.paginationNode.expand();
				if (record.node)
				C.app.createForm(record.node);
			});
		}
	},

	onButtonBeforeRender1: function(component, eOpts) {
		if (this.store.model.getName() == "C.model.Run")
		component.hide();
	},

	onButtonClick111: function(button, e, eOpts) {
		console.info('cOMPARE clicked.', this, button, e, eOpts);

		var exception = false;
		var selections = this.getView().getSelectionModel().getSelection();
		if (selections.length < 2) {
			Ext.MessageBox.show({title:'Error', msg: 'You need to choose 2 or more runs to compare', icon: Ext.MessageBox.ERROR, buttons: Ext.MessageBox.OK});
			return false;
		}


		Ext.each(selections, function(selection, index) {
			if (  selection.get('percentage') !== 100  ) {
				Ext.MessageBox.show({title:'Error', msg: 'Please choose 2 or more successfully completed runs', icon: Ext.MessageBox.ERROR, buttons: Ext.MessageBox.OK});
				exception = true;
				return false;
			}
		});
		if (exception)
		return false;

		var chartWindow = new Ext.Window({
			title  : 'Compare runs and KPIs',
			width : 870,
			height : 650,
			bodyPadding: 20,
			style: 'text-align: center',
			autoScroll : true,
			items: [{
				xtype: 'label',
				html: '<h1>Total Consumption Active Power</h1>'
			}]
		}); 

		chartWindow.show();
		chartWindow.setLoading(true, true);

		var fields = 
		[{
			name: 'x',
			type: 'float'
		}];
		var yFieldArray = [];
		var dataArray = [];
		var recordArray = [];
		var series = [];
		var axisLabels = {};

		Ext.each(selections, function(selection, index) {
			var sel_id = selection.get('_id');
			fields.push(
			{
				name: 'y'+sel_id,
				mapping: 'y',
				type: 'float'
			}
			);
			yFieldArray.push('y'+sel_id);

			var tempStore = new C.store.Results({});
			tempStore.proxy.headers = {'dbname': sel_id};

			var kpiStore = new C.store.Kpis();
			kpiStore.proxy.headers = {'dbname': sel_id};



			tempStore.on('load',function(store, records){
				var run_id = store.proxy.headers.dbname;
				var sel_name;
				selections.some(function(c){
					if (c.get('_id') == run_id) {
						sel_name = c.get('name');
						return true;
					}
				});
				var xAxisLabel = store.proxy.reader.jsonData.xAxisLabel;
				var yAxisLabel = store.proxy.reader.jsonData.xAxisLabel;

				series.push({
					title: sel_name  + ' (Aggr. unit: ' + store.proxy.reader.jsonData.aggregationUnit + ' min.)',
					type: 'line',
					highlight: {
						size: 4,
						radius: 4
					},
					tips: {
						trackMouse: true,
						width: 180,
						height: 70,
						renderer: function(storeItem, item) {
							this.setTitle(sel_name + '</br>' + yAxisLabel + ': ' + storeItem.get('y'+run_id) + ' Watt <br />' + xAxisLabel + ': ' + storeItem.get('x'));
						}
					},
					xField: 'x',
					yField: [
					'y'+run_id
					],
					selectionTolerance: 6,
					showMarkers: false,
					smooth: 3

				});

				if (dataArray.length === 0) {
					Ext.each(store.data.items, function(item,inner_index) {
						dataArray.push({'x':item.get('x')});
						dataArray[inner_index]['y'+run_id] = item.get('y');
					});

				}
				else {
					//var index =Object.keys(dataArray[0]).length - 1;
					Ext.each(store.data.items, function(item,inner_index) {
						dataArray[inner_index]['y'+ run_id] = item.get('y');
					});
				}	
				//check if dataArray is filled with all data
				if (Object.keys(dataArray[0]).length === selections.length + 1) {

					var mystore = Ext.create('Ext.data.Store', {
						fields: fields
						//data: dataArray
					});
					mystore.loadData(dataArray);

					var myResultsChart = Ext.create('Ext.chart.Chart', {
						renderTo: Ext.getBody(),
						title: 'Total Consumption Active Power',
						width: 800, 
						height: 600, 
						legend: {
							position: 'float',
							x: 65,
							y: 0,
							boxFill: 'none',
							boxStroke: 'none'
						},
						store: mystore,
						axes: [
						{
							type: 'Numeric',
							fields: [
							'x'
							],
							majorTickSteps: 20,
							minorTickSteps: 5,
							position: 'bottom',
							title: 'Time'
						},
						{
							type: 'Numeric',
							fields: yFieldArray,
							grid: {
								odd: {
									opacity: 1,
									fill: '#ddd',
									stroke: '#bbb',
									'stroke-width': 0.5
								}
							},
							position: 'left',
							title: 'Watt'
						}
						],
						series: series

					});

					chartWindow.insert(3,myResultsChart);
					chartWindow.setLoading(false);
				}
			});
			tempStore.load();

			kpiStore.on('load',function(store, records){

				records[0].data.name = selection.get('name');
				recordArray.push(records[0]);

				if (recordArray.length == selections.length) {
					var myKpiStore = Ext.create('Ext.data.Store', {
						model: 'C.model.Kpi'
						//data: dataArray
					});
					myKpiStore.loadRecords(recordArray);
					var grid = Ext.getCmp('uiNavigationTreePanel').getCustomGrid(myKpiStore);
					grid.closable = false;
					grid.style = {margin: 'auto'};
					grid.setTitle("KPIs");
					chartWindow.insert(0,grid);

				}
			});
			kpiStore.load();
		});


	},

	onButtonBeforeRender2: function(component, eOpts) {
		if (this.store.model.getName() == "C.model.Run")
		component.show();
	},

	onButtonClick1111: function(button, e, eOpts) {

		var formWindow = new Ext.Window({
			items  : new C.view.FileUploadForm(),
			title  : 'Upload file'
		}); 
		formWindow.show();
	},

	onButtonBeforeRender21: function(component, eOpts) {
		if (this.store.model.getName() == "C.model.Run")
		component.show();
	},

	onButtonClick1112: function(button, e, eOpts) {
		var selection = this.getView().getSelectionModel().getSelection()[0];
		if (!selection) {
			Ext.MessageBox.show({title:'Error', msg: 'You need to select a run from the grid', icon: Ext.MessageBox.ERROR, buttons: Ext.MessageBox.OK});
			return false;
		}

		var formWindow = new Ext.Window({
			items  : new C.view.CsnForm({run: selection.data}),
			title  : 'Create CSN'
		}); 

		formWindow.show();
	},

	onButtonBeforeRender22: function(component, eOpts) {
		if (this.store.model.getName() == "C.model.Run")
		component.show();
	},

	onGridpanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
		if (!record.node && record.paginationNode) {
			record.paginationNode.expand();
		}
		if (record.node ) {
			C.app.openTab(record.node);
		}
	},

	onToolClick1: function(tool, e, eOpts) {

		var gridWindow = new Ext.Window({
			title : this.title,
			items : this,
			layout: 'fit',
			width: 700,
			height: 500,
			autoScroll: true,
			tools: [
			{
				xtype: 'tool',
				type: 'pin',
				listeners: {
					'click': 
					function(tool, e, eOpts) {
						var gridWindow = this.getBubbleParent().getBubbleParent();
						var gridPanel = gridWindow.query("grid")[0];
						var tabPanel = Ext.getCmp('MainTabPanel');
						tabPanel.dockedItems.items[0].show();
						tabPanel.add(gridPanel);
						tabPanel.setActiveTab(gridPanel);
						tabPanel.getActiveTab().header.show();

						gridWindow.close();

					}	
				}
			}
			]
		}); 
		gridWindow.show();
		if (this.hidden) this.show();
		this.header.hide();
		Ext.getCmp("MainTabPanel").dockedItems.items[0].hide();
		/*tool.hide();
		this.query("tool")[1].show();*/



		/*
		var gridWindow = new Ext.Window({
		items : this

		}); 
		gridWindow.show();
		tool.hide();
		this.query("tool")[1].show();
		*/
	},

	onToolClick: function(tool, e, eOpts) {
		C.app.refreshGrid(this.store);
	},

	onGridpanelBeforeRender: function(component, eOpts) {
		//console.info(component);
		if (!component.tab) {
			component.setHeight(250);
			component.setWidth(750);
			//component.maxHeight = 250;
			component.margin = '0 0 10px 0';
			component.tools[0].hidden = true;
		}
		if (component.store.model.getName() == "C.model.Kpi") {
			component.down('toolbar').hide();
			//hide refresh tool
			component.tools[1].hidden = true;
		}
	},

	onGridpanelAfterRender: function(component, eOpts) {
		/*return false;
		var node = component.store.navigationNode;
		if (!node)
		return false;
		//apply only to installations for now
		if (node.get('nodeType') !== 'InstallationsCollection')
		return false;

		var parent_id = (node.get('nodeType') == 'ProjectsCollection')?'':node.parentNode.get('id');
		var inputArray = {};
		switch(node.get('nodeType')){
			case 'ProjectsCollection': inputArray = {};break;
			case 'ScenariosCollection': inputArray = {'prj_id' : parent_id};break;
			case 'InstallationsCollection': inputArray = {'scn_id' : parent_id}; break;
			case 'PricingSchemesCollection': inputArray = {'scn_id' : parent_id}; break;
			case 'DemographicsCollection': inputArray = {'scn_id' : parent_id}; break;
			case 'SimulationParamsCollection': inputArray = {'scn_id' : parent_id}; break;
			case 'PersonsCollection': inputArray = {'inst_id' : parent_id}; break;
			case 'AppliancesCollection': inputArray = {'inst_id': parent_id}; break;
			case 'ActivitiesCollection': inputArray = {'pers_id': parent_id}; break;
			case 'ActivityModelsCollection': inputArray = {'act_id' : parent_id}; break;
			default: return false;
		}



		var myToolbar = new Ext.toolbar.Paging( {
			store : component.store, 
			dock: 'bottom',
			displayInfo: true,
			displayMsg: 'Displaying records {0} - {1} of {2}',
			emptyMsg: "No topics to display",
			listeners:{
				'beforechange': 
				function(component,page,options){
					//node.set("name", node.get("name") + '(Displaying records {0} - {1} of {2})');
					while (node.hasChildNodes()) {
						node.removeChild(node.childNodes[0]);
					}
				}
			}

		} );

		myToolbar.store.proxy.extraParams = inputArray;

		component.addDocked(myToolbar);*/
	}

});