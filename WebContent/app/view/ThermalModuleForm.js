/*
 * File: app/view/ThermalModuleForm.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.ThermalModuleForm', {
	extend: 'Ext.form.Panel',

	height: 350,
	width: 685,
	layout: {
		type: 'column'
	},
	bodyPadding: 10,

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			style: {
				'text-align': 'center'
			},
			items: [
				{
					xtype: 'container',
					defaults: {
						margin: '10 0 0 0',
						'text-align': 'right'
					},
					layout: {
						type: 'column'
					},
					items: [
						{
							xtype: 'textfield',
							width: 500,
							fieldLabel: 'Web Service Url <span style=color:red>*</span>',
							labelStyle: 'text-align: right',
							labelWidth: 200,
							name: 'web_service_url',
							allowBlank: false
						},
						{
							xtype: 'combobox',
							width: 500,
							fieldLabel: 'Features <span style=color:red>*</span>',
							labelStyle: 'text-align: right',
							labelWidth: 200,
							name: 'features',
							allowBlank: false,
							displayField: 'feature_name',
							queryMode: 'local',
							store: 'ThermalFeaturesStore',
							valueField: 'feature_tag'
						}
					]
				},
				{
					xtype: 'container',
					margin: '10 0 10 100',
					layout: {
						type: 'column'
					},
					items: [
						{
							xtype: 'timefield',
							validator: function(value) {
								if (this.up('form').down('#closing_time').value !== '')
								return (this.up('form').down('#closing_time').value < this.up('form').down('#opening_time').value) ?  "Opening time cannot be later than closing time" :  true;
								return true;
							},
							itemId: 'opening_time',
							width: 230,
							fieldLabel: 'Opening Time',
							labelStyle: 'text-align: right',
							name: 'opening_time'
						},
						{
							xtype: 'timefield',
							validator: function(value) {
								if (this.up('form').down('#opening_time').value !== '')
								return (this.up('form').down('#closing_time').value < this.up('form').down('#opening_time').value) ?  "Closing time cannot be sooner than opening time" :  true;
								return true;
							},
							itemId: 'closing_time',
							margin: '0 0 0 30',
							width: 230,
							fieldLabel: 'Closing Time',
							labelStyle: 'text-align:right',
							name: 'closing_time'
						}
					]
				},
				{
					xtype: 'fieldset',
					hidden: true,
					margin: '0 0 0 40',
					padding: 10,
					style: {
						'text-align': 'left',
						margin: 'auto'
					},
					defaults: {
						labelWidth: 160
					},
					title: 'Form Alternative 1',
					items: [
						{
							xtype: 'textareafield',
							anchor: '100%',
							fieldLabel: 'Temperature Set Points',
							cols: 60
						}
					]
				},
				{
					xtype: 'fieldset',
					margin: '0 0 0 40',
					padding: '10 75',
					style: {
						'text-align': 'left',
						margin: 'auto'
					},
					defaults: {
						labelWidth: 80,
						'margin-right': '10px',
						width: 200
					},
					layout: {
						columns: 2,
						type: 'table'
					},
					title: 'Form Alternative 2',
					items: [
						{
							xtype: 'numberfield',
							validator: function(value) {
								return (this.up('form').down('#max_temp').value < this.up('form').down('#min_temp').value) ?  "Minimum temperature cannot be greater than maximum temperature" :  true;

							},
							itemId: 'min_temp',
							margin: '5 0 0 0',
							fieldLabel: 'Min. Temp',
							name: 'min_temp'
						},
						{
							xtype: 'numberfield',
							validator: function(value) {
								return (this.up('form').down('#max_temp').value < this.up('form').down('#min_temp').value) ?  "Maximum temperature cannot be less than minimum temperature" :  true;

							},
							itemId: 'max_temp',
							margin: '5 0 0 30',
							fieldLabel: 'Max. Temp',
							labelWidth: 80,
							name: 'max_temp'
						},
						{
							xtype: 'numberfield',
							fieldLabel: 'Daily Energy Price',
							labelWidth: 80,
							name: 'daily_energy_prc',
							minValue: 0
						}
					]
				}
			],
			dockedItems: [
				{
					xtype: 'container',
					dock: 'bottom',
					margin: '10 0',
					defaults: {
						scale: 'medium',
						width: 100
					},
					layout: {
						align: 'middle',
						pack: 'center',
						type: 'hbox'
					},
					items: [
						{
							xtype: 'button',
							handler: function(button, event) {
								return false;
								var myFormCmp = button.up('form'),
									myForm = myFormCmp.getForm(),
									values = myForm.getFieldValues(),
									installationForm = Ext.getCmp(myFormCmp.inst_form_id),
									inst_rec = installationForm.getRecord();

								debugger;
								if (myForm.isValid()) {
									var thermalStore = new C.store.ThermalModuleStore({storeId: 'thermalModuleStore_inst_id' + inst_rec.get('_id')});
									thermalStore.on('add', function (store, records, operation) {
										console.info('Record added', records[0]);
										button.hide();
										myFormCmp.down('#update').show();
										installationForm.down('#add_thermal').hide();
										installationForm.down('#update_thermal').show();
										installationForm.down('#delete_thermal').show();

										//add thermalModule_id to installation record
										inst_rec.set('thermalModule_id',records[0].get('_id'));
										myForm.loadRecord(records[0]);
									});
									console.info('Thermal store with id: '+ thermalStore.storeId + ' created');
									thermalStore.insert(0, new C.model.ThermalModule(values));
								}
							},
							itemId: 'create',
							scale: 'medium',
							text: 'Create',
							listeners: {
								render: {
									fn: me.onCreateRender,
									scope: me
								}
							}
						},
						{
							xtype: 'button',
							handler: function(button, event) {
								return false;
								var myFormCmp = button.up('form'),
									myForm = myFormCmp.getForm(),
									values = myForm.values;

								if (myForm.isValid())
								myForm.updateRecord();
							},
							hidden: true,
							itemId: 'update',
							scale: 'medium',
							text: 'Update',
							listeners: {
								render: {
									fn: me.onUpdateRender,
									scope: me
								}
							}
						},
						{
							xtype: 'button',
							handler: function(button, event) {
								button.up('form').getForm().reset();
							},
							margin: '0 0 0 20',
							scale: 'medium',
							text: 'Reset'
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	onCreateRender: function(component, eOpts) {
		if (component.up('form').operation === 'update')
		component.hide();
	},

	onUpdateRender: function(component, eOpts) {
		if (component.up('form').operation === 'update')
		component.show();
	}

});