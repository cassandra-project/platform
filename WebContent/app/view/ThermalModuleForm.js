/*
 * File: app/view/ThermalModuleForm.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.ThermalModuleForm', {
	extend: 'Ext.form.Panel',

	height: 300,
	width: 685,
	bodyPadding: 10,

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			style: {
				'text-align': 'center'
			},
			items: [
				{
					xtype: 'container',
					defaults: {
						margin: '10 0 0 0',
						'text-align': 'right'
					},
					layout: {
						type: 'column'
					},
					items: [
						{
							xtype: 'hiddenfield',
							fieldLabel: 'Label',
							name: 'inst_id',
							listeners: {
								render: {
									fn: me.onHiddenfieldRender1,
									scope: me
								}
							}
						},
						{
							xtype: 'combobox',
							width: 500,
							fieldLabel: 'Type <span style=color:red>*</span>',
							labelStyle: 'text-align: right',
							labelWidth: 200,
							name: 'type',
							allowBlank: false,
							displayField: 'feature_name',
							queryMode: 'local',
							store: 'ThermalFeaturesStore',
							valueField: 'feature_tag'
						}
					]
				},
				{
					xtype: 'container',
					margin: '10 0 10 100',
					layout: {
						type: 'column'
					},
					items: [
						{
							xtype: 'timefield',
							validator: function(value) {
								if (this.up('form').down('#closing_time').value) {
									var closing_time = Ext.Date.format(this.up('form').down('#closing_time').value, 'g:i A');
									var opening_time = Ext.Date.format(this.up('form').down('#opening_time').value, 'g:i A');
									return (closing_time < opening_time) ?  "Opening time cannot be later than closing time" :  true;
								}
								return true;
							},
							itemId: 'opening_time',
							width: 230,
							fieldLabel: 'Opening Time <span style=color:red>*</span>',
							labelStyle: 'text-align: right',
							name: 'opening_time',
							allowBlank: false
						},
						{
							xtype: 'timefield',
							validator: function(value) {
								if (this.up('form').down('#opening_time').value) {
									var closing_time = Ext.Date.format(this.up('form').down('#closing_time').value, 'g:i A');
									var opening_time = Ext.Date.format(this.up('form').down('#opening_time').value, 'g:i A');
									return (closing_time < opening_time) ?  "Closing time cannot be sooner than opening time" :  true;
								}
								return true;
							},
							itemId: 'closing_time',
							margin: '0 0 0 30',
							width: 230,
							fieldLabel: 'Closing Time <span style=color:red>*</span>',
							labelStyle: 'text-align:right',
							name: 'closing_time',
							allowBlank: false
						}
					]
				},
				{
					xtype: 'textareafield',
					validator: function(value) {
						try {
							debugger;
							JSON.parse(value);
							return true;
						}
						catch(e) {
							return "Input must be an array of numbers";
						}
					},
					width: 430,
					fieldLabel: 'Desired temp schedule <span style=color:red>*</span>',
					labelStyle: 'text-align:right',
					labelWidth: 200,
					name: 'desired_temp_schedule',
					allowBlank: false
				},
				{
					xtype: 'textfield',
					cls: 'dropTarget',
					width: 430,
					fieldLabel: 'Pricing Scheme <span style=color:red>*</span>',
					labelAlign: 'right',
					labelWidth: 200,
					name: 'prc_name',
					allowBlank: false,
					listeners: {
						render: {
							fn: me.onTextfieldRender112,
							scope: me
						},
						beforerender: {
							fn: me.onTextfieldBeforeRender12,
							scope: me
						}
					}
				},
				{
					xtype: 'hiddenfield',
					fieldLabel: 'Label',
					name: 'prc_id'
				}
			],
			dockedItems: [
				{
					xtype: 'container',
					dock: 'bottom',
					itemId: 'buttonContainer',
					margin: '10 0',
					defaults: {
						scale: 'medium',
						width: 100
					},
					layout: {
						align: 'middle',
						pack: 'center',
						type: 'hbox'
					},
					items: [
						{
							xtype: 'button',
							handler: function(button, event) {
								var myFormCmp = button.up('form'),
									myForm = myFormCmp.getForm(),
									values = myForm.getFieldValues(),
									installationForm = Ext.getCmp(myFormCmp.inst_form_id),
									inst_rec = installationForm.getRecord();

								if (myForm.isValid()) {

									var thermalStore = new C.store.ThermalModuleStore({storeId: 'thermalModuleStore_inst_id' + inst_rec.get('_id')});
									thermalStore.on('write', function (store, operation, eOpts) {
										var record = store.getRange()[0];
										console.info('Record added', record);
										button.hide();
										myFormCmp.down('#update').show();
										installationForm.down('#add_thermal').hide();
										installationForm.down('#view_thermal').show();
										installationForm.down('#update_thermal').show();
										installationForm.down('#delete_thermal').show();

										//add thermalModule_id to installation record
										inst_rec.set('thermalModule_id', record.get('_id'));

										myForm.loadRecord(record);

									}, null, {single: true});
										console.info('Thermal store with id: '+ thermalStore.storeId + ' created');
										thermalStore.insert(0, new C.model.ThermalModule(values));
									}
							},
							itemId: 'create',
							scale: 'medium',
							text: 'Create',
							listeners: {
								render: {
									fn: me.onCreateRender,
									scope: me
								}
							}
						},
						{
							xtype: 'button',
							handler: function(button, event) {
								var myFormCmp = button.up('form'),
									myForm = myFormCmp.getForm(),
									values =  myForm.getFieldValues();

								if (myForm.isValid()) {
									myForm.updateRecord();
								}
							},
							hidden: true,
							itemId: 'update',
							scale: 'medium',
							text: 'Update',
							listeners: {
								render: {
									fn: me.onUpdateRender,
									scope: me
								}
							}
						},
						{
							xtype: 'button',
							handler: function(button, event) {
								button.up('form').getForm().reset();
							},
							margin: '0 0 0 20',
							scale: 'medium',
							text: 'Reset'
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	onHiddenfieldRender1: function(component, eOpts) {
		var myFormCmp = component.up('form');
		var inst_rec = Ext.getCmp(myFormCmp.inst_form_id).getRecord();
		component.setValue(inst_rec.get('_id'));
	},

	onTextfieldRender112: function(component, eOpts) {
		var myForm = this.getForm();
		if (myForm.findField("prc_id").getValue()) {
			var prc_id = myForm.findField("prc_id").getValue();
			Ext.Ajax.request({
				url: '/cassandra/api/prc/' + prc_id,
				method: 'GET',
				scope: this,
				success: function(response, eOpts) {	
					response = JSON.parse(response.responseText);
					myForm.setValues({prc_name: response.data[0].name});
				}
			});
		}
		new Ext.dd.DropTarget(this.body.dom.getElementsByClassName('dropTarget')[0],{
			ddGroup:'ddGlobal',
			notifyDrop: function(dds,e,data) {	
				if (dds.dragData.records[0].get('nodeType') != 'Pricing' )
				return false;
				myForm.setValues({ prc_id: dds.dragData.records[0].get('id'), prc_name: dds.dragData.records[0].get('name')});
			return true; }
		});
	},

	onTextfieldBeforeRender12: function(component, eOpts) {
		component.helpText = 'Pricing Scheme: the pricing scheme under which the energy consumption of the installations will be billed.</br>You can add a Pricing Scheme by selecting it from the Projects Tree and dropping it here';
		component.url = 'https://github.com/cassandra-project/platform/wiki/Simulation-parameters-form';
	},

	onCreateRender: function(component, eOpts) {
		if (component.up('form').operation === 'update')
		component.hide();
	},

	onUpdateRender: function(component, eOpts) {
		if (component.up('form').operation === 'update')
		component.show();
	}

});