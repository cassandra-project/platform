/*
 * File: app/view/ActmodPropertiesForm.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.ActmodPropertiesForm', {
	extend: 'Ext.form.Panel',

	margin: '10px 0',
	padding: '',
	width: 687,
	autoScroll: true,
	layout: {
		type: 'auto'
	},
	bodyPadding: '10px',
	titleCollapse: true,

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'container',
					layout: {
						align: 'middle',
						pack: 'center',
						type: 'hbox'
					},
					items: [
						{
							xtype: 'fieldset',
							height: 230,
							itemId: 'actmodFieldset',
							width: 300,
							title: 'Properties',
							items: [
								{
									xtype: 'textfield',
									width: 246,
									name: 'name',
									fieldLabel: 'Name',
									listeners: {
										change: {
											fn: me.onTextfieldChange11,
											scope: me
										}
									}
								},
								{
									xtype: 'textfield',
									width: 246,
									name: 'type',
									fieldLabel: 'Type'
								},
								{
									xtype: 'textareafield',
									width: 246,
									name: 'description',
									fieldLabel: 'Description'
								},
								{
									xtype: 'combobox',
									width: 246,
									name: 'day_type',
									fieldLabel: 'Day type  <span style=color:red>*</span>',
									allowBlank: false,
									displayField: 'day_type',
									forceSelection: true,
									queryMode: 'local',
									store: 'DayTypeStore',
									valueField: 'day_type'
								},
								{
									xtype: 'checkboxfield',
									name: 'shiftable',
									fieldLabel: 'Shiftable',
									boxLabel: '',
									inputValue: 'true',
									uncheckedValue: 'false'
								}
							]
						},
						{
							xtype: 'fieldset',
							margins: '0 10px',
							height: 230,
							itemId: 'appliancesFieldset',
							width: 300,
							autoScroll: true,
							layout: {
								type: 'auto'
							},
							title: 'Appliances',
							items: [
								{
									xtype: 'label',
									style: 'font-size:11px; font-style:italic;',
									text: '*Appliances can be added by droping them from the main tree on the following appliances grid:'
								}
							]
						}
					]
				},
				{
					xtype: 'button',
					itemId: 'btn',
					margin: '10px 0 0 290px',
					width: 70,
					text: 'Update',
					listeners: {
						click: {
							fn: me.onButtonClick2,
							scope: me
						}
					}
				}
			]
		});

		me.callParent(arguments);
	},

	onTextfieldChange11: function(field, newValue, oldValue, options) {
		if(this.getBubbleParent())
		this.getBubbleParent().getBubbleParent().setTitle(newValue);
		this.form.getRecord().node.set({'name':newValue});
	},

	onButtonClick2: function(button, e, options) {
		var gridIds = [];
		var myForm = this.getForm();
		var record = myForm.getRecord();
		var values = myForm.getValues();

		var gridData = this.query('grid')[0].store.data;

		Ext.each(gridData.items, function(index){
			gridIds.push(index.get('_id'));

		});
		record.set({
			'name':values.name,
			'type': values.type,
			'description': values.description,
			'day_type': values.day_type,
			'shiftable': values.shiftable, 
			'containsAppliances': gridIds
		});

		this.dirtyForm = false;
		//clear dirty record
		record.node.commit();

		if (record.isNew)
		record.isNew = false;
		//record.save();
	}

});