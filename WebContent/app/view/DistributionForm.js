/*
 * File: app/view/DistributionForm.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.DistributionForm', {
	extend: 'Ext.form.Panel',

	autoRender: true,
	border: '0 0 0 0',
	margin: 10,
	style: 'border: none',
	width: 280,
	layout: {
		type: 'auto'
	},
	bodyPadding: 10,
	title: 'My Form',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'container',
					items: [
						{
							xtype: 'textfield',
							width: 220,
							fieldLabel: 'Name',
							labelWidth: 70,
							name: 'name'
						},
						{
							xtype: 'textfield',
							width: 220,
							fieldLabel: 'Type',
							labelWidth: 70,
							name: 'type'
						},
						{
							xtype: 'textfield',
							width: 220,
							fieldLabel: 'Description',
							labelWidth: 70,
							name: 'description'
						},
						{
							xtype: 'combobox',
							itemId: 'distrType',
							width: 220,
							fieldLabel: 'Types',
							labelWidth: 70,
							name: 'distrType',
							allowBlank: false,
							displayField: 'distrType',
							forceSelection: true,
							queryMode: 'local',
							store: 'DistrTypeStore',
							valueField: 'distrType',
							listeners: {
								change: {
									fn: me.onDistrTypeChange,
									scope: me
								}
							}
						},
						{
							xtype: 'textareafield',
							itemId: 'val',
							width: 220,
							fieldLabel: 'Values',
							labelWidth: 70,
							name: 'val',
							growAppend: '-',
							cols: 30,
							listeners: {
								beforerender: {
									fn: me.onTextareafieldBeforeRender,
									scope: me
								},
								change: {
									fn: me.onValChange,
									scope: me
								}
							}
						},
						{
							xtype: 'textareafield',
							itemId: 'params',
							width: 220,
							fieldLabel: 'Parameters',
							labelWidth: 70,
							name: 'params',
							listeners: {
								beforerender: {
									fn: me.onTextareafieldBeforeRender1,
									scope: me
								}
							}
						},
						{
							xtype: 'button',
							itemId: 'btn',
							margin: '10 0 0 90',
							width: 70,
							text: 'Update',
							listeners: {
								click: {
									fn: me.onButtonClick2,
									scope: me
								}
							}
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	onDistrTypeChange: function(field, newValue, oldValue, eOpts) {
		if (newValue == 'Histogram') {
			this.down('#val').show();
			this.down('#params').setValue('[]');
			this.down('#params').hide();
			/*if (this.query('chart')[1]) {
			this.query('chart')[1].show();
			this.query('chart')[0].hide();
			}*/
		}
		else {
			this.down('#params').show();
			this.down('#val').setValue('[]');
			this.down('#val').hide();
			/*if (this.query('chart')[1] ) {
			this.query('chart')[1].hide();
			this.query('chart')[0].show();
			}*/
		} 

	},

	onTextareafieldBeforeRender: function(component, eOpts) {
		component.helpText = 'For Histogram one needs to insert values:</br>[1,2,3,4...]';
		component.url = 'https://github.com/cassandra-project/platform/wiki/Activity-Model-form';
	},

	onValChange: function(field, newValue, oldValue, eOpts) {
		var valuesDistr = newValue.trim();
		try {
			valuesDistr = JSON.parse(valuesDistr);
		}
		catch(e) {
			return false;
		}
		if (this.query('chart')[1]) {
			if ( valuesDistr.length > 100) {
				this.query('chart')[1].hide();
				this.query('chart')[0].show();
			}
		}
	},

	onTextareafieldBeforeRender1: function(component, eOpts) {
		component.helpText = 'For the Uniform Distribution one needs to insert an expression with start and end values:</br>[{"start":100,"end":200}]</br></br>For the Normal Distribution one needs to insert an expression with mean and std values:</br>[{"mean":45,"std":10}]</br></br>Finally, for the Gaussian Mixture Models one needs to insert tuples of w, mean and std:</br>[{"w":1 , "mean":45,"std":10}, {"w":1 , "mean":100,"std":10}]' ;
		component.url = 'https://github.com/cassandra-project/platform/wiki/Activity-Model-form';
	},

	onButtonClick2: function(button, e, eOpts) {
		var myFormCmp = this;
		var myForm = this.getForm();
		var record =myForm.getRecord();
		var values = myForm.getValues();

		var parameters = myForm.getFieldValues().params.trim();
		var valuesDistr = myForm.getFieldValues().val.trim();
		var myDistrChart = this.query('chart')[0];
		var myDistrChartStore = this.query('chart')[0].store;
		var distr_type = this.distr_type;

		if(parameters) {
			try {
				parameters = JSON.parse(parameters);
			}
			catch(e) {
				Ext.MessageBox.show({
					title:'"Parameters" field: Invalid input', 
					msg: 'A valid input example would be: </br>[{"w":103,"mean":203.3,"std":103.4}]', 
					icon: Ext.MessageBox.ERROR
				});
				return false;
			}
		}
		else
		parameters = [];

		if(valuesDistr) {
			try {
				valuesDistr = JSON.parse(valuesDistr);
			}
			catch(e) {
				Ext.MessageBox.show({
					title:'"Values" field: Invalid input', 
					msg: 'A valid input example would be: [3,4]', 
					icon: Ext.MessageBox.ERROR
				});
				return false;
			}
		}
		else 
		valuesDistr = [];

		if (record) {
			var distr_store = record.store;

			record.set({
				'name':values.name,
				'type': values.type,
				'description': values.description,
				'distrType': values.distrType,
				'parameters': parameters, 
				'values': valuesDistr
			});

			if (record.isNew)
			record.isNew = false;

		}

		else {
			var propertiesCmp = Ext.getCmp('MainTabPanel').getActiveTab().query('form')[0];
			var actmod_record = propertiesCmp.getForm().getRecord();
			var distr_store = actmod_record.c.store;

			distr_store.insert(0,{
				name:values.name,
				type: values.type,
				description: values.description,
				distrType: values.distrType,
				values: valuesDistr, 
				parameters: parameters,
				actmod_id:actmod_record.get('_id')
			});				  

		}


		distr_store.on(
		'update', 
		function(store, record, operation, eOpts ) {
			if (record.isNew) {
				actmod_record.set(distr_type,record.get('_id') );
				myForm.loadRecord(record);
				myDistrChartStore.proxy.url += '/' + record.get('_id');

			}
			myDistrChartStore.on('load', function(store){
				var exp = store.proxy.reader.rawData.data[0].exp;
				var html = (exp < 0) ? ' x 10<span class="sup">' + exp + '</span>'  : ' ';
				myFormCmp.down('#expLabel').update(html);

				if (myFormCmp.query('chart')[1]) {
					if (record.get('distrType') == "Histogram") {
						myFormCmp.query('chart')[0].hide();
						myFormCmp.query('chart')[1].show();
					}
					else {
						myFormCmp.query('chart')[1].hide();
						myFormCmp.query('chart')[0].show();
					}
				}
			});
			myDistrChartStore.load();
		}, 
		null, 
		{ single : true }
		);	

		this.dirtyForm = false;

	}

});