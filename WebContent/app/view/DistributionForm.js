/*
 * File: app/view/DistributionForm.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.DistributionForm', {
	extend: 'Ext.form.Panel',

	border: '0 0 0 0',
	margin: 10,
	style: 'border: none',
	width: 260,
	autoScroll: true,
	layout: {
		type: 'auto'
	},
	bodyPadding: 10,
	closable: false,
	title: 'My Form',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'container',
					height: 326,
					autoScroll: true,
					items: [
						{
							xtype: 'textfield',
							width: 220,
							name: 'name',
							fieldLabel: 'Name',
							labelWidth: 70
						},
						{
							xtype: 'textfield',
							width: 220,
							name: 'type',
							fieldLabel: 'Type',
							labelWidth: 70
						},
						{
							xtype: 'textfield',
							width: 220,
							name: 'description',
							fieldLabel: 'Description',
							labelWidth: 70
						},
						{
							xtype: 'combobox',
							width: 220,
							name: 'distrType',
							fieldLabel: 'Types',
							labelWidth: 70,
							allowBlank: false,
							displayField: 'distrType',
							forceSelection: true,
							queryMode: 'local',
							store: 'DistrTypeStore',
							valueField: 'distrType'
						},
						{
							xtype: 'textareafield',
							height: 45,
							width: 220,
							name: 'val',
							fieldLabel: 'Values',
							labelWidth: 70,
							listeners: {
								beforerender: {
									fn: me.onTextareafieldBeforeRender,
									scope: me
								}
							}
						},
						{
							xtype: 'textareafield',
							height: 67,
							width: 220,
							name: 'params',
							fieldLabel: 'Parameters',
							labelWidth: 70,
							listeners: {
								beforerender: {
									fn: me.onTextareafieldBeforeRender1,
									scope: me
								}
							}
						},
						{
							xtype: 'button',
							itemId: 'btn',
							margin: '10 0 0 90',
							width: 70,
							text: 'Update',
							listeners: {
								click: {
									fn: me.onButtonClick2,
									scope: me
								}
							}
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	onTextareafieldBeforeRender: function(abstractcomponent, options) {
		abstractcomponent.helpText = 'A valid input example would be: [3,4]';
	},

	onTextareafieldBeforeRender1: function(abstractcomponent, options) {
		abstractcomponent.helpText = 'A valid input example would be: </br>[{"w":103,"mean":203.3,"std":103.4}]' ;
	},

	onButtonClick2: function(button, e, options) {
		var myForm = this.getForm();
		var record = myForm.getRecord();
		var values = myForm.getValues();

		var parameters = myForm.getFieldValues().params.trim();
		var valuesDistr = myForm.getFieldValues().val.trim();
		var myDistrChart = this.query('chart')[0];
		var myDistrChartStore = this.query('chart')[0].store;
		var distr_type = this.distr_type;

		if(parameters) {
			try {
				parameters = JSON.parse(parameters);
			}
			catch(e) {
				Ext.MessageBox.show({
					title:'"Parameters" field: Invalid input', 
					msg: 'A valid input example would be: </br>[{"w":103,"mean":203.3,"std":103.4}]', 
					icon: Ext.MessageBox.ERROR
				});
				return false;
			}
		}
		else
		parameters = [];

		if(valuesDistr) {
			try {
				valuesDistr = JSON.parse(valuesDistr);
			}
			catch(e) {
				Ext.MessageBox.show({
					title:'"Values" field: Invalid input', 
					msg: 'A valid input example would be: [3,4]', 
					icon: Ext.MessageBox.ERROR
				});
				return false;
			}
		}
		else 
		valuesDistr = [];

		if (record) {
			var distr_store = record.store;

			record.set({
				'name':values.name,
				'type': values.type,
				'description': values.description,
				'distrType': values.distrType,
				'parameters': parameters, 
				'values': valuesDistr
			});

			if (record.isNew)
			record.isNew = false;

		}

		else {
			var propertiesCmp = Ext.getCmp('MainTabPanel').getActiveTab().query('form')[0];
			var actmod_record = propertiesCmp.getForm().getRecord();
			var distr_store = actmod_record.c.store;

			distr_store.insert(0,{
				name:values.name,
				type: values.type,
				description: values.description,
				distrType: values.distrType,
				values: valuesDistr, 
				parameters: parameters,
				actmod_id:actmod_record.get('_id')
			});				  

		}

		this.remove(myDistrChart);
		myDistrChartStore.removeAll();

		if (distr_type == "repeatsNrOfTime") 
		myDistrChart = new C.view.DistributionHistogramChart({store: myDistrChartStore});
		else
		myDistrChart = new C.view.DistributionNormalChart({store: myDistrChartStore});


		this.insert(2, myDistrChart);

		distr_store.on(
		'update', 
		function(store, record, operation, eOpts ) {
			if (record.isNew) {
				actmod_record.set(distr_type,record.get('_id') );
				myForm.loadRecord(record);
				myDistrChartStore.proxy.url += '/' + record.get('_id');
			}

			myDistrChartStore.load();
		}, 
		null, 
		{ single : true }
		);	

		this.dirtyForm = false;

	}

});