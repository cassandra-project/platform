/*
 * File: app/view/CsnForm.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.CsnForm', {
	extend: 'Ext.form.Panel',

	bodyPadding: 10,

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'fieldcontainer',
					formBind: false,
					itemId: 'graphContainer',
					defaults: {
						labelWidth: 75,
						width: 250,
						margin: '0 10px 10px 0'
					},
					layout: {
						columns: 4,
						type: 'table'
					},
					fieldLabel: 'Graph Parameters',
					items: [
						{
							xtype: 'combobox',
							fieldLabel: 'Graph Type <span style=color:red>*</span>',
							labelWidth: 90,
							name: 'graphType',
							allowBlank: false,
							displayField: 'graphTypeName',
							queryMode: 'local',
							store: 'CsnGraphTypeStore',
							valueField: 'graphTypeTag'
						},
						{
							xtype: 'numberfield',
							fieldLabel: 'Minimum Weight',
							name: 'minWeight',
							allowBlank: false
						},
						{
							xtype: 'textfield',
							hidden: true,
							name: 'run_id',
							readOnly: true,
							listeners: {
								render: {
									fn: me.onTextfieldRender,
									scope: me
								}
							}
						},
						{
							xtype: 'textfield',
							cls: 'dropTarget',
							fieldLabel: 'Run <span style=color:red>*</span>',
							name: 'run_name',
							submitValue: false,
							readOnly: true,
							listeners: {
								render: {
									fn: me.onTextfieldRender111,
									scope: me
								}
							}
						},
						{
							xtype: 'checkboxfield',
							width: 130,
							fieldLabel: 'No edges',
							name: 'no_edges'
						},
						{
							xtype: 'button',
							handler: function(button, event) {
								var form_cmp = this.up('form');
								var form = form_cmp.getForm();
								var selected_run = form_cmp.run;

								if(form.isValid()){
									var csnsNode = C.app.getNodeFromTree(selected_run._id).parentNode.parentNode.findChild('name','CSNs');
									var cur_record = form.getFieldValues();
									delete cur_record.run_name;
									cur_record.run_id = selected_run._id;
									cur_record.prj_id = selected_run.prj_id;
									debugger;
									//if csns store doesn't exist create it
									if (!csnsNode.c) {
										csnsNode.c = {
											store : new C.store.Csn({
												storeId: 'CsnCollectionStore-prj_id-'+csnsNode.parentNode.get('nodeId'),
												navigationNode: csnsNode
											})
										};
										csnsNode.c.store.on('load',function (store, records, successful, eOpts ){
											store.add(new C.model.Csn(cur_record));
										}, null, {single: true} );

											csnsNode.c.store.load({
												params: {
													prj_id: csnsNode.parentNode.get('nodeId')
												}
											});
										}
										else {
											csnsNode.c.store.add(new C.model.Csn(cur_record));
										}

										form_cmp.up('window').close();

									}
							},
							width: 70,
							text: 'Submit'
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	onTextfieldRender: function(component, eOpts) {
		component.setValue( component.up('form').run._id);
	},

	onTextfieldRender111: function(component, eOpts) {
		/*var myForm = component.up('form').getForm();
		new Ext.dd.DropTarget(component.up('form').body.dom.getElementsByClassName('dropTarget')[0],{
		ddGroup:'ddGlobal',
		notifyDrop: function(dds,e,data) {	
		if (dds.dragData.records[0].get('nodeType') != 'Run' )
		return false;
		myForm.setValues({ run_id: dds.dragData.records[0].get('id'), run_name: dds.dragData.records[0].get('name')});
		return true; }
		});*/
		component.setValue( component.up('form').run._id);
	}

});