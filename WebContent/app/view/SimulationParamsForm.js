/*
 * File: app/view/SimulationParamsForm.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.SimulationParamsForm', {
	extend: 'Ext.form.Panel',

	width: 431,
	layout: {
		type: 'auto'
	},
	bodyPadding: 10,
	title: 'My Form',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'container',
					autoScroll: true,
					layout: {
						type: 'anchor'
					},
					items: [
						{
							xtype: 'fieldset',
							padding: '10px',
							width: 400,
							title: 'Properties',
							items: [
								{
									xtype: 'textfield',
									width: 246,
									fieldLabel: 'Name',
									name: 'name',
									listeners: {
										change: {
											fn: me.onTextfieldChange1111,
											scope: me
										}
									}
								},
								{
									xtype: 'textfield',
									width: 246,
									fieldLabel: 'Location',
									name: 'locationInfo'
								},
								{
									xtype: 'numberfield',
									hidden: true,
									width: 246,
									fieldLabel: 'Duration',
									name: 'numberOfDays',
									allowDecimals: false
								},
								{
									xtype: 'numberfield',
									width: 246,
									fieldLabel: 'Monte Carlo Runs',
									name: 'mcruns',
									value: 1,
									allowDecimals: false,
									maxValue: 100,
									minValue: 1
								},
								{
									xtype: 'datefield',
									width: 246,
									fieldLabel: 'Date Started',
									name: 'dateStarted',
									allowBlank: false
								},
								{
									xtype: 'datefield',
									width: 246,
									fieldLabel: 'Date Ends',
									name: 'dateEnds'
								},
								{
									xtype: 'textareafield',
									width: 246,
									fieldLabel: 'Notes',
									name: 'description'
								},
								{
									xtype: 'textfield',
									hidden: true,
									itemId: 'prc_id',
									width: 246,
									fieldLabel: 'Pricing Scheme',
									name: 'prc_id'
								},
								{
									xtype: 'textfield',
									cls: 'dropTarget',
									width: 246,
									fieldLabel: 'Pricing Scheme',
									name: 'prc_name',
									listeners: {
										render: {
											fn: me.onTextfieldRender11,
											scope: me
										},
										beforerender: {
											fn: me.onTextfieldBeforeRender1,
											scope: me
										}
									}
								},
								{
									xtype: 'container',
									margin: '20px 0',
									layout: {
										align: 'middle',
										pack: 'center',
										type: 'hbox'
									},
									items: [
										{
											xtype: 'button',
											itemId: 'btn',
											width: 70,
											text: 'Update',
											listeners: {
												click: {
													fn: me.onButtonClick2,
													scope: me
												}
											}
										},
										{
											xtype: 'button',
											margins: '0 0 0 10px',
											width: 70,
											text: 'Run',
											listeners: {
												click: {
													fn: me.onButtonClick21,
													scope: me
												}
											}
										}
									]
								}
							]
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	onTextfieldChange1111: function(field, newValue, oldValue, eOpts) {
		this.setTitle(newValue);
		var node = C.app.getNodeFromTree(this.form.getRecord().internalId);
		node.set({'name':newValue});
	},

	onTextfieldRender11: function(component, eOpts) {
		var myForm = this.getForm();
		if (myForm.findField("prc_id").getValue()) {
			var prc_id = myForm.findField("prc_id").getValue();
			Ext.Ajax.request({
				url: '/cassandra/api/prc/' + prc_id,
				method: 'GET',
				scope: this,
				success: function(response, eOpts) {	
					response = JSON.parse(response.responseText);
					myForm.setValues({prc_name: response.data[0].name});
				}
			});
		}
		new Ext.dd.DropTarget(this.body.dom.getElementsByClassName('dropTarget')[0],{
			ddGroup:'ddGlobal',
			notifyDrop: function(dds,e,data) {	
				if (dds.dragData.records[0].get('nodeType') != 'Pricing' )
				return false;
				myForm.setValues({ prc_id: dds.dragData.records[0].get('id'), prc_name: dds.dragData.records[0].get('name')});
			return true; }
		});
	},

	onTextfieldBeforeRender1: function(component, eOpts) {
		component.helpText = 'Pricing Scheme: the pricing scheme under which the energy consumption of the installations will be billed.</br>You can add a Pricing Scheme by selecting it from the Projects Tree and dropping it here';
		component.url = 'https://github.com/cassandra-project/platform/wiki/Simulation-parameters-form';
	},

	onButtonClick2: function(button, e, eOpts) {
		var myForm = this.getForm();
		var node = C.app.getNodeFromTree(myForm.getRecord().internalId);
		var record = C.app.getRecordByNode(node);
		var values = myForm.getValues();

		var calendar = {};
		var duration = 0;

		var dateStarted = myForm.getFieldValues().dateStarted;
		if (dateStarted) {
			calendar = C.app.getCalendar(dateStarted);
			var dateEnds = myForm.getFieldValues().dateEnds;
			if (dateEnds) {
				var one_day = 1000*60*60*24;
				duration = (dateEnds.getTime() - dateStarted.getTime()) / one_day;
				if (duration < 0) {
					Ext.MessageBox.show({
						title:'Invalid simulation end date', 
						msg: 'The date that simulation ends cannot be </br>before the one it starts!', 
						icon: Ext.MessageBox.ERROR
					});
					return false;
				}
			}
		}

		if (myForm.isValid()) {
			record.set({
				'name': values.name,
				'description': values.description,
				'locationInfo': values.locationInfo,
				'mcruns':values.mcruns,
				'calendar': calendar, 
				'numberOfDays': duration,
				'prc_id': values.prc_id
			});

			this.dirtyForm = false;

			//clear dirty record
			record.node.commit();
		}
	},

	onButtonClick21: function(button, e, eOpts) {
		//invoke "Update" button click event
		this.query('button')[0].fireEvent('click', this.query('button')[0]);
		var smp_node = C.app.getNodeFromTree(this.getForm().getRecord().internalId);
		var project_node = smp_node.parentNode.parentNode.parentNode.parentNode;
		var runsNode = project_node.findChild('name','Runs');

		//if runs store doesn't exist create it
		if (!runsNode.c) {
			runsNode.c = {
				store : new C.store.Runs({
					storeId: 'RunCollectionStore-prj_id-'+project_node.get('nodeId'),
					navigationNode: runsNode
				})
			};
			runsNode.c.store.on('add', function(store, record, operation, eOpts ) {
				C.app.openTab(runsNode);
			});
			runsNode.c.store.on('load',function (store, records, successful, eOpts ){
				store.add(new C.model.Run({smp_id : smp_node.get('id')}));
			}, null, {single: true} );

				runsNode.c.store.load({
					params: {
						prj_id: project_node.get('nodeId')
					}
				});
			}
			else {
				runsNode.c.store.on('add', function(store, record, operation, eOpts ) {
					C.app.openTab(runsNode);
				});
				runsNode.c.store.add(new C.model.Csn({smp_id : smp_node.get('id')}));
			}



	}

});