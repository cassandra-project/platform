/*
 * File: app/view/SimulationParamsForm.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.SimulationParamsForm', {
	extend: 'Ext.form.Panel',

	height: 323,
	width: 431,
	layout: {
		type: 'auto'
	},
	bodyPadding: 10,
	closable: true,
	title: 'My Form',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'container',
					autoScroll: true,
					layout: {
						type: 'anchor'
					},
					items: [
						{
							xtype: 'fieldset',
							padding: '10px',
							width: 400,
							title: 'Properties',
							items: [
								{
									xtype: 'textfield',
									width: 246,
									name: 'name',
									fieldLabel: 'Name',
									listeners: {
										change: {
											fn: me.onTextfieldChange1111,
											scope: me
										}
									}
								},
								{
									xtype: 'textareafield',
									width: 246,
									name: 'description',
									fieldLabel: 'Description'
								},
								{
									xtype: 'textfield',
									width: 246,
									name: 'locationInfo',
									fieldLabel: 'Location'
								},
								{
									xtype: 'numberfield',
									hidden: true,
									width: 246,
									name: 'numberOfDays',
									readOnly: false,
									fieldLabel: 'Duration',
									allowDecimals: false
								},
								{
									xtype: 'datefield',
									width: 246,
									name: 'dateStarted',
									readOnly: false,
									fieldLabel: 'Date Started'
								},
								{
									xtype: 'datefield',
									width: 246,
									name: 'dateEnds',
									readOnly: false,
									fieldLabel: 'Date Ends'
								},
								{
									xtype: 'container',
									margin: '20px 0',
									layout: {
										align: 'middle',
										pack: 'center',
										type: 'hbox'
									},
									items: [
										{
											xtype: 'button',
											width: 70,
											autoWidth: false,
											text: 'Update',
											listeners: {
												click: {
													fn: me.onButtonClick2,
													scope: me
												}
											}
										},
										{
											xtype: 'button',
											margins: '0 0 0 10px',
											width: 70,
											autoWidth: false,
											text: 'Run',
											listeners: {
												click: {
													fn: me.onButtonClick21,
													scope: me
												}
											}
										}
									]
								}
							]
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	onTextfieldChange1111: function(field, newValue, oldValue, options) {
		this.setTitle(newValue);
	},

	onButtonClick2: function(button, e, options) {
		var myForm = this.getForm();
		var record = myForm.getRecord();


		myForm.updateRecord();
		var calendar = {};
		var duration = 0;

		var dateStarted = myForm.getFieldValues().dateStarted;
		if (dateStarted) {
			var day = dateStarted.getDate();
			var month = dateStarted.getMonth()+1;
			var year = dateStarted.getFullYear();
			var weekdayNumb = dateStarted.getDay( );
			var weekday = '';
			switch (weekdayNumb) {
				case 0: weekday = 'Sunday';break;
				case 1: weekday = 'Monday';break;
				case 2: weekday = 'Tuesday';break;
				case 3: weekday = 'Wednesday';break;
				case 4: weekday = 'Thursday';break;
				case 5: weekday = 'Friday';break;
				case 6: weekday = 'Saturday';break;
			}
			calendar = {'year':year, 'month': month, 'weekday': weekday, 'dayOfMonth':day};
			var dateEnds = myForm.getFieldValues().dateEnds;
			if (dateEnds) {
				var one_day = 1000*60*60*24;
				duration = (dateEnds.getTime() - dateStarted.getTime()) / one_day;
			}
		}

		record.set({'calendar': calendar, 'numberOfDays': duration});
		//record.save();
	},

	onButtonClick21: function(button, e, options) {
		var project_node = this.getForm().getRecord().node.parentNode.parentNode.parentNode.parentNode;
		if (! (project_node.lastChild.c) ) project_node.lastChild.expand();
		var run_store = project_node.lastChild.c.store;
		run_store.insert(0, new C.model.Run({smp_id : this.getForm().getRecord().node.get('id'),
		started: new Date().getTime()}));
	}

});