/*
 * File: app/view/LightingModuleForm.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.LightingModuleForm', {
	extend: 'Ext.form.Panel',

	width: 685,
	layout: {
		type: 'column'
	},
	bodyPadding: 10,

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'hiddenfield',
					fieldLabel: 'Label',
					name: 'inst_id',
					listeners: {
						render: {
							fn: me.onHiddenfieldRender,
							scope: me
						}
					}
				},
				{
					xtype: 'container',
					layout: {
						type: 'column'
					},
					items: [
						{
							xtype: 'fieldset',
							title: 'Room Dimensions',
							items: [
								{
									xtype: 'numberfield',
									anchor: '100%',
									fieldLabel: 'Room length',
									name: 'roomLength',
									minValue: 0
								},
								{
									xtype: 'numberfield',
									anchor: '100%',
									fieldLabel: 'Room width',
									name: 'roomWidth',
									minValue: 0
								},
								{
									xtype: 'numberfield',
									anchor: '100%',
									fieldLabel: 'Ceiling height',
									name: 'ceilingHeight',
									minValue: 0
								}
							]
						},
						{
							xtype: 'fieldset',
							margin: '0 0 0 20',
							defaults: {
								labelWidth: 200,
								width: 330
							},
							title: 'Luminaires',
							items: [
								{
									xtype: 'numberfield',
									anchor: '100%',
									fieldLabel: 'Number of luminaires in the area',
									name: 'numberOfLuminaires',
									allowDecimals: false,
									minValue: 0
								},
								{
									xtype: 'numberfield',
									anchor: '100%',
									fieldLabel: 'Num. of lamps',
									name: 'numberOfLamps',
									allowDecimals: false,
									minValue: 0
								},
								{
									xtype: 'numberfield',
									anchor: '100%',
									fieldLabel: 'Initial lumen output',
									name: 'initialLumenOutput',
									minValue: 0
								}
							]
						}
					]
				},
				{
					xtype: 'container',
					layout: {
						type: 'column'
					},
					items: [
						{
							xtype: 'fieldset',
							padding: 14.5,
							defaults: {
								labelWidth: 140
							},
							title: 'Coefficient of Utilization',
							items: [
								{
									xtype: 'numberfield',
									anchor: '100%',
									fieldLabel: 'Luminaire Height',
									name: 'luminaireHeight',
									minValue: 0
								},
								{
									xtype: 'numberfield',
									anchor: '100%',
									fieldLabel: 'Workplane Height',
									name: 'workplaneHeight',
									minValue: 0
								}
							]
						},
						{
							xtype: 'fieldset',
							margin: '0 0 0 10',
							defaults: {
								labelWidth: 120
							},
							title: 'Reflectances',
							items: [
								{
									xtype: 'numberfield',
									anchor: '100%',
									fieldLabel: 'Ceilings (%)',
									name: 'ceilingReflectanceValue',
									minValue: 0
								},
								{
									xtype: 'numberfield',
									anchor: '100%',
									fieldLabel: 'Walls  (%)',
									name: 'wallsReflectanceValue',
									minValue: 0
								},
								{
									xtype: 'numberfield',
									anchor: '100%',
									fieldLabel: 'Floors  (%)',
									name: 'floorReflectanceValue',
									minValue: 0
								}
							]
						}
					]
				},
				{
					xtype: 'container'
				},
				{
					xtype: 'fieldset',
					defaults: {
						labelWidth: 140
					},
					layout: {
						columns: 2,
						type: 'table'
					},
					title: 'Light Loss Factor - Non-Recoverable',
					items: [
						{
							xtype: 'numberfield',
							anchor: '100%',
							fieldLabel: 'Ballast factor',
							name: 'ballastFactor',
							minValue: 0
						},
						{
							xtype: 'numberfield',
							anchor: '100%',
							margin: '0 0 0 20',
							fieldLabel: 'Ballast lamp photometer factor',
							name: 'ballastLampPhotometerFactor',
							minValue: 0
						},
						{
							xtype: 'numberfield',
							anchor: '100%',
							fieldLabel: 'Equipment Operating Factor',
							name: 'equipmentOperatingFactor',
							minValue: 0
						},
						{
							xtype: 'numberfield',
							anchor: '100%',
							margin: '0 0 0 20',
							fieldLabel: 'Heat extraction thermal factor',
							name: 'heatExtractionThermalFactor',
							minValue: 0
						},
						{
							xtype: 'numberfield',
							anchor: '100%',
							fieldLabel: 'Lamp position factor',
							name: 'lampPositionFactor',
							minValue: 0
						},
						{
							xtype: 'numberfield',
							anchor: '100%',
							margin: '0 0 0 20',
							fieldLabel: 'Luminaire ambient temperature factor',
							name: 'luminaireAmbientTemperatureFactor',
							minValue: 0
						},
						{
							xtype: 'numberfield',
							anchor: '100%',
							fieldLabel: 'Luminaire surface depreciation factor',
							name: 'luminaireSurfaceDepreciationFactor',
							minValue: 0
						},
						{
							xtype: 'numberfield',
							anchor: '100%',
							margin: '0 0 0 20',
							fieldLabel: 'Voltage to luminaire factor',
							name: 'voltageToLuminaireFactor',
							minValue: 0
						}
					]
				},
				{
					xtype: 'fieldset',
					defaults: {
						labelWidth: 140
					},
					layout: {
						columns: 2,
						type: 'table'
					},
					title: 'Light Loss Factor - Recoverable',
					items: [
						{
							xtype: 'numberfield',
							fieldLabel: 'Lamp burnout factor',
							name: 'lampBurnoutFactor',
							minValue: 0
						},
						{
							xtype: 'numberfield',
							margin: '0 0 0 20',
							fieldLabel: 'Lamp lumen depreciation factor',
							name: 'lampLumenDepreciationFactor',
							minValue: 0
						},
						{
							xtype: 'numberfield',
							fieldLabel: 'Luminaire dirt depreciation factor',
							name: 'luminaireDirtDepreciationFactor',
							minValue: 0
						},
						{
							xtype: 'numberfield',
							margin: '0 0 0 20',
							fieldLabel: 'Room surface dirt depreciation factor',
							name: 'roomSurfaceDirtDepreciationFactor',
							minValue: 0
						}
					]
				},
				{
					xtype: 'fieldset',
					padding: 20,
					layout: {
						columns: 2,
						type: 'table'
					},
					title: 'Visual Comfort',
					items: [
						{
							xtype: 'fieldset',
							margin: '1 15 0 0',
							defaults: {
								labelWidth: 150,
								width: 280
							},
							title: 'Contrast',
							items: [
								{
									xtype: 'numberfield',
									anchor: '100%',
									fieldLabel: 'Object luminance level in lux',
									name: 'objectLuminanceLevel'
								},
								{
									xtype: 'numberfield',
									anchor: '100%',
									fieldLabel: 'Background luminance level in lux',
									name: 'backgroundLuminanceLevel'
								}
							]
						},
						{
							xtype: 'fieldset',
							margin: '1 0 0 0',
							padding: '7 10',
							defaults: {
								labelWidth: 150,
								width: 280
							},
							title: 'Background Luminance',
							items: [
								{
									xtype: 'numberfield',
									anchor: '100%',
									fieldLabel: 'The illuminance at the eye of the observer in lux',
									name: 'visualComfort'
								},
								{
									xtype: 'numberfield',
									anchor: '100%',
									fieldLabel: 'Steradian',
									name: 'steradian'
								}
							]
						},
						{
							xtype: 'fieldset',
							margin: '10 15 0 0',
							defaults: {
								labelWidth: 150,
								width: 280
							},
							title: 'Unified Glare Rating',
							items: [
								{
									xtype: 'numberfield',
									anchor: '100%',
									fieldLabel: 'The solid angle in steradian',
									name: 'solidAngle'
								},
								{
									xtype: 'numberfield',
									anchor: '100%',
									fieldLabel: 'Position index (Guth Index)',
									name: 'positionIndex'
								}
							]
						},
						{
							xtype: 'fieldset',
							margin: '10 0 0 0',
							padding: '4 10 11 10',
							defaults: {
								labelWidth: 150,
								width: 280
							},
							title: 'Uniformity',
							items: [
								{
									xtype: 'numberfield',
									anchor: '100%',
									fieldLabel: 'Minimum Illuminance in lux',
									name: 'minimumIlluminance'
								}
							]
						}
					]
				}
			],
			dockedItems: [
				{
					xtype: 'container',
					dock: 'bottom',
					margin: '10 0',
					defaults: {
						scale: 'medium',
						width: 100
					},
					layout: {
						align: 'middle',
						pack: 'center',
						type: 'hbox'
					},
					items: [
						{
							xtype: 'button',
							handler: function(button, event) {
								var myFormCmp = button.up('form'),
									myForm = myFormCmp.getForm(),
									values = myForm.getFieldValues(),
									installationForm = Ext.getCmp(myFormCmp.inst_form_id),
									inst_rec = installationForm.getRecord();


								if (myForm.isValid()) {
									var lightingStore = new C.store.LightingModuleStore({storeId: 'lightingModuleStore_inst_id' + inst_rec.get('_id')});
									lightingStore.on('write', function (store, operation, eOpts) {
										var record = store.getRange()[0];
										console.info('Record added', record);
										button.hide();
										myFormCmp.down('#update').show();
										installationForm.down('#add_lighting').hide();
										installationForm.down('#update_lighting').show();
										installationForm.down('#delete_lighting').show();

										//add thermalModule_id to installation record
										inst_rec.set('lightingModule_id', record.get('_id'));

										myForm.loadRecord(record);
									}, null, {single: true});
										console.info('Lighting store with id: '+ lightingStore.storeId + ' created');
										lightingStore.insert(0, new C.model.LightingModule(values));
									}
							},
							scale: 'medium',
							text: 'Create',
							listeners: {
								render: {
									fn: me.onButtonRender,
									scope: me
								}
							}
						},
						{
							xtype: 'button',
							handler: function(button, event) {
								var myFormCmp = button.up('form'),
									myForm = myFormCmp.getForm();

								if (myForm.isValid()) {
									myForm.updateRecord();
								}
							},
							hidden: true,
							itemId: 'update',
							scale: 'medium',
							text: 'Update',
							listeners: {
								render: {
									fn: me.onUpdateRender1,
									scope: me
								}
							}
						},
						{
							xtype: 'button',
							handler: function(button, event) {
								button.up('form').getForm().reset();
							},
							margin: '0 0 0 20',
							scale: 'medium',
							text: 'Reset'
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	onHiddenfieldRender: function(component, eOpts) {
		var myFormCmp = component.up('form');
		var inst_rec = Ext.getCmp(myFormCmp.inst_form_id).getRecord();
		component.setValue(inst_rec.get('_id'));
	},

	onButtonRender: function(component, eOpts) {
		if (component.up('form').operation === 'update')
		component.hide();
	},

	onUpdateRender1: function(component, eOpts) {
		if (component.up('form').operation === 'update')
		component.show();
	}

});