/*
 * File: app/view/MyViewport.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.MyViewport', {
	extend: 'Ext.container.Viewport',

	layout: {
		type: 'border'
	},

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'toolbar',
					region: 'north',
					height: 77,
					id: 'top_toolbar',
					items: [
						{
							xtype: 'image',
							margins: '0 0 0 10px',
							height: 73,
							width: 130,
							src: 'resources/icons/logo.png'
						},
						{
							xtype: 'tbtext',
							height: 23,
							id: 'logo-text',
							text: 'platform'
						}
					]
				},
				{
					xtype: 'panel',
					region: 'west',
					id: 'west_panel',
					minWidth: 350,
					width: 150,
					layout: {
						type: 'fit'
					},
					collapsible: true,
					title: 'My Projects'
				},
				{
					xtype: 'panel',
					region: 'center',
					id: 'center_panel',
					collapsible: false,
					title: 'Main Panel',
					items: [
						{
							xtype: 'form',
							frame: true,
							id: 'LoginForm',
							itemId: 'LoginForm',
							margin: '50 0 0 100',
							width: 300,
							layout: {
								align: 'center',
								pack: 'center',
								type: 'vbox'
							},
							bodyPadding: '30 10',
							title: 'Please login',
							titleCollapse: false,
							items: [
								{
									xtype: 'textfield',
									width: 250,
									name: 'username',
									fieldLabel: 'Username',
									allowBlank: false
								},
								{
									xtype: 'textfield',
									width: 250,
									inputType: 'password',
									name: 'password',
									fieldLabel: 'Password',
									allowBlank: false,
									minLength: 6,
									regexText: 'Password should have at least length 6, and contain one capital letter and a number'
								},
								{
									xtype: 'button',
									formBind: false,
									margin: '20 0 0 0',
									padding: '5 0',
									width: 93,
									text: 'Submit',
									listeners: {
										click: {
											fn: me.onButtonClick,
											scope: me
										}
									}
								}
							],
							listeners: {
								beforerender: {
									fn: me.onLoginFormBeforeRender,
									scope: me
								}
							}
						}
					]
				},
				{
					xtype: 'panel',
					region: 'east',
					id: 'east_panel',
					minWidth: 200,
					width: 150,
					layout: {
						type: 'fit'
					},
					collapsible: true,
					title: 'Libraries'
				},
				{
					xtype: 'toolbar',
					region: 'south',
					height: 16,
					id: 'bottom_toolbar'
				}
			]
		});

		me.callParent(arguments);
	},

	onButtonClick: function(button, e, options) {
		var loginForm = Ext.getCmp('LoginForm').getForm();
		var values = loginForm.getValues();

		if (loginForm.isValid()) {

			C.auth = Ext.util.base64.encode(values.username + ':' + values.password);

			var treePanel = new C.view.MyTreePanel({id: 'uiNavigationTreePanel'});
			var tabPanel =  new C.view.MyTabPanel({id: 'MainTabPanel'});

			treePanel.doLayout();
			this.getComponent('west_panel').add(treePanel);

			tabPanel.doLayout();
			this.getComponent('center_panel').removeAll();
			this.getComponent('center_panel').layout = 'fit';
			this.getComponent('center_panel').add(tabPanel);

			/*Ext.Ajax.request({
			scope : this,
			method : 'GET',
			headers : {
			'Authorization' : 'Basic ' + values.username + '' + Ext.utils.base64.encode(values.password)
			}, 
			url : cassandra/api/prj,
			success : function(response, options) {
			var record = abstractcomponent.getRootNode();

			record.c = {
			store: {}
			};
			console.info('Creating new store for projects.');
			record.c.store = new C.store.Projects({
			storeId: record.data.nodeType+'Store',
			navigationNode: record
			});
			record.c.store.load({});

			},
			failure : function(response, options) {
			C.username = null;
			C.password = null;
			Ext.MessageBox.show({title:'Error', msg: JSON.stringify(response.errors), icon: Ext.MessageBox.ERROR, buttons: Ext.MessageBox.OK});
			}
			});*/


		}
	},

	onLoginFormBeforeRender: function(abstractcomponent, options) {
		if (C.dbname) {
			var treePanel = new C.view.MyTreePanel({id: 'uiNavigationTreePanel'});
			var tabPanel =  new C.view.MyTabPanel({id: 'MainTabPanel'});

			treePanel.doLayout();
			this.getComponent('west_panel').add(treePanel);

			tabPanel.doLayout();
			this.getComponent('center_panel').removeAll();
			this.getComponent('center_panel').layout = 'fit';
			this.getComponent('center_panel').add(tabPanel);
		}
	}

});