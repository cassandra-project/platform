/*
 * File: app/view/EntitiesGrid.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.EntitiesGrid', {
	extend: 'Ext.grid.Panel',

	frame: false,
	margin: '10px 0',
	maxWidth: 250,
	autoScroll: false,
	forceFit: true,
	hideHeaders: false,
	store: 'DemographicEntities',
	columnLines: false,

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			viewConfig: {
				autoShow: false,
				hidden: false,
				minHeight: 100,
				autoScroll: true,
				loadingText: 'loading..',
				plugins: [
					Ext.create('Ext.grid.plugin.DragDrop', {
						ptype: 'gridviewdragdrop',
						ddGroup: 'ddGlobal',
						enableDrag: false
					})
				],
				listeners: {
					beforedrop: {
						fn: me.onGriddragdroppluginBeforeDrop,
						scope: me
					},
					drop: {
						fn: me.onGriddragdroppluginDrop,
						scope: me
					}
				}
			},
			selModel: Ext.create('Ext.selection.RowModel', {
				mode: 'MULTI'
			}),
			dockedItems: [
				{
					xtype: 'toolbar',
					dock: 'top',
					width: 508,
					items: [
						{
							xtype: 'button',
							text: 'Delete',
							listeners: {
								click: {
									fn: me.onButtonClick1,
									scope: me
								}
							}
						}
					]
				}
			],
			plugins: [
				Ext.create('Ext.grid.plugin.RowEditing', {
					ptype: 'rowediting'
				})
			],
			columns: [
				{
					xtype: 'gridcolumn',
					hidden: true,
					dataIndex: 'entity_id',
					text: 'Entity_id'
				},
				{
					xtype: 'gridcolumn',
					dataIndex: 'entity_type',
					text: 'Entity_type'
				},
				{
					xtype: 'numbercolumn',
					dataIndex: 'probability',
					text: 'Probability',
					editor: {
						xtype: 'numberfield',
						decimalPrecision: 3,
						maxValue: 1
					}
				}
			]
		});

		me.callParent(arguments);
	},

	onGriddragdroppluginBeforeDrop: function(node, data, overModel, dropPosition, dropFunction, options) {
		console.info('Before drop.', this, node, data, overModel, dropPosition, dropFunction, options);
		/* NOTE
		Returning false to this event signals that the drop gesture was invalid, and if the drag proxy will
		animate back to the point from which the drag began.
		Returning 0 To this event signals that the data transfer operation should not take place, but that
		the gesture was valid, and that the repair operation should not take place.
		*/

		var record = data.records[0];

		if( (record.get('nodeType')=='Appliance' || record.get('nodeType')=='Person')&& record.parentNode.parentNode.parentNode.parentNode.get('nodeId') == this.scenarioId){

			data.copy = true;

			this.store.insert(0, {'entity_id':record.get('nodeId'), 'entity_type':record.get('nodeType').toLowerCase()});
			dropFunction.cancelDrop();
			this.plugins[0].startEdit(0, 0);
			return 0;
		}
		return false;


	},

	onGriddragdroppluginDrop: function(node, data, overModel, dropPosition, options) {
		return false;
	},

	onButtonClick1: function(button, e, options) {
		console.info('Delete clicked.', this, button, e, options);

		var selection = this.getView().getSelectionModel().getSelection();
		if (selection) {
			this.store.remove(selection);	
		}
	}

});