/*
 * File: app/view/MyTreePanel.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.MyTreePanel', {
	extend: 'Ext.tree.Panel',

	autoScroll: true,
	collapseDirection: 'left',
	store: 'NavigationTreeStore',
	displayField: 'name',
	folderSort: false,
	useArrows: true,

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			viewConfig: {
				frame: true,
				height: 91,
				margin: '5px 0 0 0',
				width: 200,
				loadingText: 'loading...',
				plugins: [
					Ext.create('Ext.tree.plugin.TreeViewDragDrop', {
						ddGroup: 'ddGlobal'
					})
				],
				listeners: {
					beforeitemmouseenter: {
						fn: me.onTreeviewBeforeItemMouseEnter,
						scope: me
					},
					itemdblclick: {
						fn: me.onTreeviewItemDblClick,
						scope: me
					},
					beforedrop: {
						fn: me.onTreedragdroppluginBeforeDrop,
						scope: me
					}
				}
			},
			listeners: {
				afterrender: {
					fn: me.onUiNavigationTreePanelAfterRender,
					scope: me
				},
				itemappend: {
					fn: me.onUiNavigationTreePanelItemAppend,
					scope: me
				},
				beforerender: {
					fn: me.onUiNavigationTreePanelBeforeRender,
					scope: me
				}
			}
		});

		me.callParent(arguments);
	},

	onTreedragdroppluginBeforeDrop: function(node, data, overModel, dropPosition, dropHandler, eOpts) {
		console.info('Before node drop.', this, node, data, overModel, dropPosition, dropHandler, eOpts);
		// TODO Rename ALL the collections to itemCollection instead of itemsCollection
		//if(overModel.raw.nodeType == data.records[0].raw.nodeType + 'sCollection'){
		var record = (data.records[0].node) ? data.records[0].node : data.records[0];
		var nodeType = record.get('nodeType');
		// Node from tree || Node from grid.
		if (record.parentNode.get('nodeType') == overModel.get('nodeType')){
			// record can be a lot of things, navigation record, grid row.
			// Get the actuall data from its store to skip unwanted behaviour.
			dropHandler.cancelDrop();
			var index = Ext.getStore(record.get('nodeStoreId')).findExact('_id', record.get('id'));
			var node = Ext.getStore(record.get('nodeStoreId')).getAt(index);
			// TODO Epic SWITCH-CASE statement goes here to get the *_id key for the parent.
			// ex. scenario_id in the Installation case.
			// TODO Move this epic thigie to each model as config?

			parent_idKey = '';
			switch(record.get('nodeType')){
				case 'Scenario': parent_idKey = 'project_id'; break;
				case 'SimulationParam': parent_idKey = 'scn_id'; break;
				case 'Installation': parent_idKey = 'scenario_id'; break;
				case 'Pricing': parent_idKey = 'scn_id'; break;
				case 'Demographic': parent_idKey = 'scn_id'; break;
				case 'Person': parent_idKey = 'inst_id'; break;
				case 'Appliance': parent_idKey = 'inst_id'; break;
				case 'Activity': parent_idKey = 'pers_id'; break;
				case 'ActivityModel': parent_idKey = 'act_id'; break;
				default: return false;
			}

			if ( !Ext.EventObject.shiftKey && record.get('nodeType') !== 'Pricing' && record.get('nodeType') !== 'Demographic' && record.get('nodeType') !== 'SimulationParam'){
				data.copy = true;
				var targetID = '';
				var meID = '';
				switch(record.get('nodeType')){
					case 'Scenario': targetID = 'toPrjID'; meID = 'scnID'; parent_idKey = 'prj_id'; break;
					case 'Installation': targetID = 'toScnID'; meID = 'instID'; parent_idKey = 'scn_id'; break;
					case 'Person': targetID = 'toInstID'; meID = 'persID'; break;
					case 'Appliance': targetID = 'toInstID'; meID = 'appID'; break;
					case 'ActivityModel': targetID = 'toActID'; meID = 'actmodID'; break;

					default: return false;
				}

				Ext.Ajax.request({
					url: '/cassandra/api/copy?'+meID+'='+node.get('_id')+'&'+targetID+'='+overModel.get('parentId'),
					method: 'POST',
					scope: this,
					success: function(response, eOpts) {	
						response = JSON.parse(response.responseText);
						var params = {};
						params[parent_idKey] = overModel.get('parentId');
						overModel.removeAll();
						try {
							overModel.c.store.load( {params : params });
						}
						catch (e) {
							overModel.expand();
							overModel.c.store.load( {params : params });
						}
						Ext.sliding_box.msg('Success', JSON.stringify(response.message));
					}
				});

			} 
			else {

				//Ext.sliding_box.msg('Drag and Drop info', 'By holding <b>Shift</b> key pressed while copying a node </br> all its childred will be copied as well');

				var recordRawData = JSON.parse(JSON.stringify(node.data));
				delete recordRawData._id;
				recordRawData[parent_idKey] = overModel.get('parentId'); 
				try {
					overModel.c.store.add(recordRawData);
				}
				catch(e) {
					overModel.expand();
					overModel.c.store.add(recordRawData);
				}
			}
			return 0;
		}

		return false;





	},

	onTreeviewBeforeItemMouseEnter: function(dataview, record, item, index, e, eOpts) {
		//console.info('Navigation tree panel before item mouse enter.', dataview, record, item, index, e, options); 
	},

	onTreeviewItemDblClick: function(dataview, record, item, index, e, eOpts) {
		var breadcrumb = record.getPath();
		var pathToMe =  record.get('nodeType')+':'+breadcrumb;
		var tabs = Ext.getCmp('MainTabPanel');
		var isOpen = false;
		Ext.each (tabs.items.items, function(item, index) {
			if (item.pathToMe == pathToMe) {
				tabs.setActiveTab(item);
				isOpen = true;
				return false;
			}
		});
		if (!isOpen) 
		C.app.createForm(record);

	},

	onUiNavigationTreePanelAfterRender: function(component, eOpts) {
		var record = component.getRootNode();

		record.c = {
			store: {}
		};
		console.info('Creating new store for projects.');
		record.c.store = new C.store.Projects({
			storeId: record.data.nodeType+'Store',
			navigationNode: record
		});
		record.c.store.load({});
	},

	onUiNavigationTreePanelItemAppend: function(nodeinterface, node, index, eOpts) {
		console.info('Appended new node.', node);
		node.isExpandable = function(){
			return !this.isLeaf() && (this.get('expandable') || this.hasChildNodes());
		};

		/*if(node.data.fakeChildren===true){
		node.appendChild({
		name: 'dummy',
		nodeType: 'Dummy',
		nodeId: '',
		nodeStoreId: '',
		draggable: false
		});
		}*/
	},

	onUiNavigationTreePanelBeforeRender: function(component, eOpts) {
		console.info('Before render treepanel.', this, component, eOpts);

		component.getRootNode().data.icon = "resources/icons/projects.png";
		component.getRootNode().data.iconCls = "treeIcon";

		component.on('nodedragover', function(dragEvent) {
			dragEvent.cancel = true;
		});
		component.on(
		'beforeitemexpand',
		function(record, e){
			console.info('BEFORE EXPAND: ', this, record, e);
			if(!record.c){
				console.info('Creating structure for node '+record.data.name+'.', record);
				record.c = {
					store: {} // single store, not array (?)
				};
				switch(record.data.nodeType){
					case 'ProjectsCollection':
					console.info('Projects have been loaded and added on navigation render. Skipping this.');
					break;
					case 'Project':
					//record.removeAll();
					console.info('Creating dummy nodes for project.');
					record.appendChild({
						name: 'Scenarios',
						nodeType: 'ScenariosCollection',
						expanded: false,
						leaf: false,
						expandable: true,
						fakeChildren: true,
						draggable: false,
						icon: 'resources/icons/scenarios.png',
						iconCls: 'treeIcon'
					});
					if(!C.dbname)
					record.appendChild({
						name: 'Runs',
						nodeType: 'RunsCollection',
						expanded: false,
						leaf: false,
						expandable: true,
						fakeChildren: true,
						draggable: false,
						icon: 'resources/icons/runs.png',
						iconCls: 'treeIcon'
					});
					else {
						record.appendChild({
							name: 'Run Graph',
							nodeType: 'RunGraph',
							leaf: true,
							draggable: false,
							icon: 'resources/icons/sim_params.png',
							iconCls: 'treeIcon'
						});
					}
					break;	
					case 'RunsCollection':
					//record.removeAll();
					console.info('Creating store for scenarios.');
					record.c.store = new C.store.Runs({
						storeId: record.data.nodeType+'Store-prj_id-'+record.parentNode.get('nodeId'),
						navigationNode: record

					});
					//record.c.store.proxy.extraParams = {'prj_id': record.parentNode.get('nodeId')};
					record.c.store.load({
						params: {
							prj_id: record.parentNode.get('nodeId')
						}
					});
					//Ext.getCmp('MainTabPanel').add(new C.view.ScenariosGrid({store: record.c.store}));
					break;
					case 'ScenariosCollection':
					//record.removeAll();
					console.info('Creating store for scenarios.');
					record.c.store = new C.store.Scenarios({
						storeId: record.data.nodeType+'Store-prj_id-'+record.parentNode.get('nodeId'),
						navigationNode: record
					});
					record.c.store.load({
						params: {
							prj_id: record.parentNode.get('nodeId')
						}
					});
					//Ext.getCmp('MainTabPanel').add(new C.view.ScenariosGrid({store: record.c.store}));
					break;
					case 'Scenario':
					//record.removeAll();
					console.info('Creating dummy nodes for scenario.');
					record.appendChild({
						name: 'Installations',
						nodeType: 'InstallationsCollection',
						expanded: false,
						leaf: false,
						expandable: true,
						fakeChildren: true,
						draggable: false,
						icon: 'resources/icons/installations.png',
						iconCls: 'treeIcon'
					});
					record.appendChild({
						name: 'Simulation Parameters',
						nodeType: 'SimulationParamsCollection',
						expanded: false,
						leaf: false,
						expandable: true,
						fakeChildren: true,
						draggable: false,
						icon: 'resources/icons/sim_params.png',
						iconCls: 'treeIcon'
					});
					record.appendChild({
						name: 'Pricing Schemes',
						nodeType: 'PricingSchemesCollection',
						expanded: false,
						leaf: false,
						expandable: true,
						fakeChildren: true,
						draggable: false,
						icon: 'resources/icons/pricing.png',
						iconCls: 'treeIcon'
					});
					var index = Ext.getStore(record.get('nodeStoreId')).findExact('_id', record.get('id'));
					var dataRecord = Ext.getStore(record.get('nodeStoreId')).getAt(index);
					if (dataRecord.get('setup') == 'dynamic') {
						record.appendChild({
							name: 'Demographics',
							nodeType: 'DemographicsCollection',
							expanded: false,
							leaf: false,
							expandable: true,
							fakeChildren: true,
							draggable: false,
							icon: 'resources/icons/demographics.png',
							iconCls: 'treeIcon'
						});
					}
					break;
					case 'SimulationParamsCollection':
					//record.removeAll();
					console.info('Creating store for simulation params.');
					record.c.store = new C.store.SimulationParams({
						storeId: record.data.nodeType+'Store-scn_id-'+record.parentNode.get('nodeId'),
						navigationNode: record
					});
					record.c.store.load({
						params: {
							scn_id: record.parentNode.get('nodeId')
						}
					});
					break;
					case 'InstallationsCollection':
					//record.removeAll();
					console.info('Creating store for installations.');
					record.c.store = new C.store.Installations({
						storeId: record.data.nodeType+'Store-scn_id-'+record.parentNode.get('nodeId'),
						navigationNode: record
					});
					//record.c.store.proxy.extraParams = {'scn_id': record.parentNode.get('nodeId')};
					record.c.store.load({
						params: {
							scn_id: record.parentNode.get('nodeId')
						}
					});
					break;
					case 'PricingSchemesCollection':
					//record.removeAll();
					console.info('Creating store for pricing schemes.');
					record.c.store = new C.store.Pricing({
						storeId: record.data.nodeType+'Store-scn_id-'+record.parentNode.get('nodeId'),
						navigationNode: record
					});
					record.c.store.load({
						params: {
							scn_id: record.parentNode.get('nodeId')
						}
					});
					break;
					case 'DemographicsCollection':
					//record.removeAll();
					console.info('Creating store for Demographics.');
					record.c.store = new C.store.Demographics({
						storeId: record.data.nodeType+'Store-scn_id-'+record.parentNode.get('nodeId'),
						navigationNode: record
					});
					record.c.store.load({
						params: {
							scn_id: record.parentNode.get('nodeId')
						}
					});
					break;
					//Ext.getCmp('MainTabPanel').add(new C.view.InstallationsGrid({store: record.c.store}));
					case 'Installation':
					//record.removeAll();
					console.info('Creating dummy nodes for installation.');
					record.appendChild({
						name: 'Persons',
						nodeType: 'PersonsCollection',
						expanded: false,
						leaf: false,
						expandable: true,
						fakeChildren: true,
						draggable: false,
						icon: 'resources/icons/persons.png',
						iconCls: 'treeIcon'
					});
					record.appendChild({
						name: 'Appliances',
						nodeType: 'AppliancesCollection',
						expanded: false,
						leaf: false,
						expandable: true,
						fakeChildren: true,
						draggable: false,
						icon: 'resources/icons/appliances.png',
						iconCls: 'treeIcon'
					});
					break;
					case 'PersonsCollection':
					//record.removeAll();
					console.info('Creating store for installations.');
					record.c.store = new C.store.Persons({
						storeId: record.data.nodeType+'Store-inst_id-'+record.parentNode.get('nodeId'),
						navigationNode: record
					});
					record.c.store.load({
						params: {
							inst_id: record.parentNode.get('nodeId')
						}
					});
					break;
					case 'Person':
					//record.removeAll();
					console.info('Creating dummy nodes for installation.');
					record.appendChild({
						name: 'Activities',
						nodeType: 'ActivitiesCollection',
						expanded: false,
						leaf: false,
						expandable: true,
						fakeChildren: true,
						draggable: false,
						icon: 'resources/icons/activities.png',
						iconCls: 'treeIcon'
					});
					break;
					case 'ActivitiesCollection':
					//record.removeAll();
					console.info('Creating store for activities.');
					record.c.store = new C.store.Activities({
						storeId: record.data.nodeType+'Store-pers_id-'+record.parentNode.get('nodeId'),
						navigationNode: record
					});
					record.c.store.load({
						params: {
							pers_id: record.parentNode.get('nodeId')
						}
					});
					break;
					case 'Activity':
					//record.removeAll();
					console.info('Creating dummy nodes for activity.');
					record.appendChild({
						name: 'Activity Models',
						nodeType: 'ActivityModelsCollection',
						expanded: false,
						leaf: false,
						expandable: true,
						fakeChildren: true,
						draggable: false,
						icon: 'resources/icons/activity_models.png',
						iconCls: 'treeIcon'
					});
					break;
					case 'ActivityModelsCollection':
					//record.removeAll();
					console.info('Creating store for activity models.');
					record.c.store = new C.store.ActivityModels({
						storeId: record.data.nodeType+'Store-act_id-'+record.parentNode.get('nodeId'),
						navigationNode: record
					});
					record.c.store.load({
						params: {
							act_id: record.parentNode.get('nodeId')
						}
					});
					break;
					/*case 'ActivityModel':
					//record.removeAll();
					console.info('Creating dummy nodes for activity model.');
					record.appendChild({
						name: 'Distributions',
						nodeType: 'DistributionsCollection',
						expanded: false,
						leaf: false,
						expandable: true,
						fakeChildren: true,
						draggable: false
					});
					break;
					case 'DistributionsCollection':
					//record.removeAll();
					console.info('Creating store for distributions.');
					record.c.store = new C.store.Distributions({
						storeId: record.data.nodeType+'Store-actmod_id-'+record.parentNode.get('nodeId'),
						navigationNode: record
					});
					record.c.store.load({
						params: {
							actmod_id: record.parentNode.get('nodeId')
						}
					});
					break;*/
					case 'AppliancesCollection':
					//record.removeAll();
					console.info('Creating store for installations.');
					record.c.store = new C.store.Appliances({
						storeId: record.data.nodeType+'Store-inst_id-'+record.parentNode.get('nodeId'),
						navigationNode: record
					});
					record.c.store.load({
						params: {
							inst_id: record.parentNode.get('nodeId')
						}
					});
					break;
					/*case 'Appliance':
					//record.removeAll();
					console.info('Creating dummy nodes for appliance.');
					record.appendChild({
						name: 'Consumption Models',
						nodeType: 'ConsumptionModelsCollection',
						expanded: false,
						leaf: false,
						expandable: true,
						fakeChildren: true,
						draggable: false
					});
					break;
					case 'ConsumptionModelsCollection':
					//record.removeAll();
					console.info('Creating store for Consumption Models.');
					record.c.store = new C.store.ConsumptionModels({
						storeId: record.data.nodeType+'Store-app_id-'+record.parentNode.get('nodeId'),
						navigationNode: record
					});
					record.c.store.load({
						params: {
							app_id: record.parentNode.get('nodeId')
						}
					});
					break;*/
					default:
					console.error('Not sure what to do with type: '+record.nodeType);
				}
			}else{
				console.info('Node has been already rendered before.');
			}
		},
		this
		);
	},

	getCustomGrid: function(myStore) {
		var store = myStore;
		var fields = store.getProxy().getModel().getFields();
		var cols = [];

		// Create columns for new store
		Ext.Array.forEach(fields, function (f) {
			if (f.name == 'percentage') {
				cols.push(/*{
					header: 'Progress',
					dataIndex: f.name,
					width: 210,
					renderer: function (v, m, r) {
						var id = Ext.id();
						Ext.defer(function () {
							Ext.widget('progressbar', {
								id: 'progressbar' + r.get('_id'),
								text: v+'% Completed',
								renderTo: id,
								value: v / 100,
								width: 200
							});
						}, 50);
						return Ext.String.format('<div id="{0}"></div>', id);
					}
				}*/{
					header   : 'Progress',
					width    : 150,
					sortable : false,
					dataIndex: f.name,
					renderer: function (v, m, r) {
						var tmpValue = (v == -1) ? -1 : v / 100;
						var tmpText = (v == -1) ? '<span style="color: red">Failed</span>' :  v+'% Completed';
						var progressRenderer = (function (pValue, pText) {
							var b = new Ext.ProgressBar();
							return function(pValue, pText) {
								b.updateProgress(pValue, pText, true);
								return Ext.DomHelper.markup(b.getRenderTree());
							};
						})(tmpValue, tmpText);
						return progressRenderer(tmpValue, tmpText);
					}
				},
				/*{
				header: '',
				sortable: false,
				width: 60,
				dataIndex: 'refresh',
				renderer: function (v, m, r) {
				var id = Ext.id();
				Ext.defer(function () {
				Ext.widget('button', {
				renderTo: id,
				text: 'Refresh',
				//iconCls: 'refresh',
				disabled: (r.get('percentage') == 100) ? true : false,
				handler: function () { 

					Ext.Ajax.request({
						url: '/cassandra/api/runs/' + r.get('_id'),
						method: 'GET',
						scope: this,
						success: function(response, opts) {
							var o = Ext.decode(response.responseText);

							r.set('percentage', o.data[0].percentage);
							if (o.data[0].percentage == 100) {
								r.set('ended', o.data[0].ended);
								this.setDisabled(true);
							}
						}
					});

				}
			});
		}, 50);
		return Ext.String.format('<div id="{0}"></div>', id);
	}
			}*/
			{
	sortable: false,
	xtype: 'actioncolumn',
	width: 17,
	items: [{
		tooltip: 'Refresh',
		handler: function(grid, rowIndex, colIndex) {
			var r = grid.getStore().getAt(rowIndex);
			Ext.Ajax.request({
				url: '/cassandra/api/runs/' + r.get('_id'),
				method: 'GET',
				scope: this,
				success: function(response, opts) {
					var o = Ext.decode(response.responseText);
					var r = grid.getStore().getAt(rowIndex);
					r.set('percentage', o.data[0].percentage);
					if (o.data[0].percentage == 100) {
						r.set('ended', o.data[0].ended);
						grid.refresh();
					}
				}
			});
		},
		getClass: function(v, meta, rec) {
			if (rec.get('percentage') < 100 && rec.get('percentage') >= 0) {
				return 'refresh_progress';
			} else {
				return 'refresh_progress_disabled';
			}
		}
	}]
			}

			);
}
else if (f.name == 'started' || f.name == 'ended'){
			cols.push({
	header: f.name,
	dataIndex: f.name,
	renderer: function (v, m, r) {
		return (v == -1) ? '' : new Date(v);
	}
			});
}
/*else if (f.name == 'compare'){
cols.push({
header: f.name,
dataIndex: f.name,
renderer: function (v, m, r) {
return "<input type='checkbox'" + (f.value ? "checked='checked'" : "") + ">";
}
});

}*/
else {
			cols.push({
	header: f.name,
	dataIndex: f.name,
	hidden: (f.type.type == 'auto') ? true : false
			});
}
});

try {
if (store.navigationNode.store.treeStore.tree.root.get('nodeType') == 'CassLibrary') {
			grid.getDockedItems()[0].hide();
}
}
catch (e){}


var grid = new C.view.DynamicGrid({
store: myStore,
columns: cols
});

//grid.reconfigure(store, cols); 
return grid;


	}

});