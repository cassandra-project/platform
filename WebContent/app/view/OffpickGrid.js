/*
 * File: app/view/OffpickGrid.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.OffpickGrid', {
	extend: 'Ext.grid.Panel',

	margin: '20 0 0 0',
	maxHeight: 400,
	autoScroll: true,
	title: 'Offpeak',
	forceFit: true,
	store: 'OffpickStore',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			viewConfig: {
				minHeight: 70
			},
			dockedItems: [
				{
					xtype: 'toolbar',
					dock: 'top',
					width: 508,
					items: [
						{
							xtype: 'button',
							text: 'New',
							listeners: {
								click: {
									fn: me.onButtonClick211,
									scope: me
								}
							}
						},
						{
							xtype: 'button',
							text: 'Delete',
							listeners: {
								click: {
									fn: me.onButtonClick1211,
									scope: me
								}
							}
						}
					]
				}
			],
			plugins: [
				Ext.create('Ext.grid.plugin.RowEditing', {
					clicksToMoveEditor: 1,
					listeners: {
						edit: {
							fn: me.onRowEditingEdit,
							scope: me
						}
					}
				})
			],
			columns: [
				{
					xtype: 'gridcolumn',
					dataIndex: 'from',
					text: 'From',
					editor: {
						xtype: 'timefield',
						invalidText: '{0} is not a valid time. </br> (i.e. 24:56)',
						format: 'H:i'
					}
				},
				{
					xtype: 'gridcolumn',
					dataIndex: 'to',
					text: 'To',
					editor: {
						xtype: 'timefield',
						invalidText: '{0} is not a valid time. </br> (i.e. 24:56)',
						format: 'H:i'
					}
				}
			]
		});

		me.callParent(arguments);
	},

	onButtonClick211: function(button, e, eOpts) {

		this.store.insert(0, {price:0, level : 0});
		this.plugins[0].startEdit(0, 0);




	},

	onButtonClick1211: function(button, e, eOpts) {
		console.info('Delete clicked.', this, button, e, eOpts);

		var selections = this.getView().getSelectionModel().getSelection();
		this.store.remove(selections);

	},

	onRowEditingEdit: function(editor, context, eOpts) {
		if (context.newValues.from !== context.originalValues.from && new Date(context.newValues.from) !== "Invalid Date")
		context.record.set("from", Ext.Date.format(new Date(context.newValues.from), "H:i"));
		if (context.newValues.to !== context.originalValues.to && new Date(context.newValues.to) !== "Invalid Date")
		context.record.set("to", Ext.Date.format(new Date(context.newValues.to), "H:i"));
	}

});