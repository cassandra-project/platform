/*
 * File: app/view/SearchGrid.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.SearchGrid', {
	extend: 'Ext.grid.Panel',

	autoScroll: true,
	closable: true,
	title: 'Browse Collections',
	columnLines: false,
	forceFit: true,
	store: 'SearchStore',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			viewConfig: {
				loadingText: 'loading..'
			},
			dockedItems: [
				{
					xtype: 'toolbar',
					dock: 'bottom',
					items: [
						{
							xtype: 'form',
							hidden: true,
							defaults: {
								margin: '0 10px 0 0'
							},
							layout: {
								type: 'hbox'
							},
							bodyPadding: 10,
							items: [
								{
									xtype: 'textfield',
									cls: 'dropTarget',
									fieldLabel: 'Replacement',
									name: 'repl_with_name',
									allowBlank: false,
									listeners: {
										render: {
											fn: me.onTextfieldRender,
											scope: me
										}
									}
								},
								{
									xtype: 'textfield',
									hidden: true,
									fieldLabel: 'Replacement',
									name: 'repl_with_id'
								},
								{
									xtype: 'button',
									handler: function(button, event) {
										var myForm = button.up('form').getForm();
										var replacement_id = myForm.getValues().repl_with_id;
										var entity_type = button.up('grid').down('form').getValues().collection;

										var replaced_records = button.up('grid').getView().getSelectionModel().getSelection();

										if (!replacement_id || replaced_records.length === 0)
										return false;

										var replaced_ids = replaced_records.map(function(rec){return rec.get("_id");});

										Ext.Ajax.request({
											url: '/cassandra/api/replace',
											jsonData: {"replaced_ids" : replaced_ids, "replacement_id" : replacement_id, "entity_type": entity_type},
											method: 'POST',
											scope: this,
											success: function(response, opts) {
												var response_obj = Ext.JSON.decode(response.responseText);

												var successMsg = response_obj.message;
												Ext.sliding_box.msg('Success', JSON.stringify(successMsg));

											},
											failure: function(response, opts) {
												var response_obj = Ext.JSON.decode(response.responseText);
												Ext.MessageBox.show({title:'Error', msg: JSON.stringify(response_obj.errors), icon: Ext.MessageBox.ERROR, buttons: Ext.MessageBox.OK}); 
											}
										});
									},
									width: 100,
									text: 'Replace'
								}
							]
						}
					]
				},
				{
					xtype: 'toolbar',
					dock: 'top',
					items: [
						{
							xtype: 'form',
							defaults: {
								labelWidth: 75,
								width: 250,
								margin: '0 10px 10px 0'
							},
							layout: {
								columns: 3,
								type: 'table'
							},
							bodyPadding: 10,
							items: [
								{
									xtype: 'textfield',
									hidden: true,
									fieldLabel: 'Scenario <span style=color:red>*</span>',
									name: 'scn_id',
									allowBlank: false
								},
								{
									xtype: 'textfield',
									cls: 'dropTarget',
									fieldLabel: 'Scenario <span style=color:red>*</span>',
									name: 'scn_name',
									submitValue: false,
									allowBlank: false,
									listeners: {
										render: {
											fn: me.onTextfieldRender11,
											scope: me
										}
									}
								},
								{
									xtype: 'combobox',
									fieldLabel: 'Search in <span style=color:red>*</span>',
									name: 'collection',
									allowBlank: false,
									displayField: 'collectionName',
									queryMode: 'local',
									store: 'SelectCollectionStore',
									valueField: 'collectionTag'
								},
								{
									xtype: 'textfield',
									fieldLabel: 'Name',
									name: 'name'
								},
								{
									xtype: 'textfield',
									fieldLabel: 'Type',
									name: 'type'
								},
								{
									xtype: 'textfield',
									fieldLabel: 'Description',
									name: 'description'
								},
								{
									xtype: 'button',
									handler: function(button, event) {
										var myForm = this.up('form').getForm();
										var grid = this.up('grid');
										var values = myForm.getValues();

										if(myForm.isValid()){
											var params = {
												'scn_id': values.scn_id,
												'col': values.collection
											};
											if (values.name) 
											params.name = values.name;
											if (values.description) 
											params.description = values.description;
											if (values.type) 
											params.type = values.type;

											grid.store.load({params : params});

											var bottom_form = grid.getDockedItems('toolbar[dock="bottom"]')[0].down('form');
											if (!bottom_form.isHidden())
											bottom_form.getForm().reset();
										}
									},
									width: 50,
									text: 'Go'
								}
							]
						}
					]
				}
			],
			plugins: [
				Ext.create('Ext.grid.plugin.BufferedRenderer', {

				})
			],
			columns: [
				{
					xtype: 'gridcolumn',
					hidden: true,
					dataIndex: '_id',
					text: '_id'
				},
				{
					xtype: 'gridcolumn',
					hidden: true,
					dataIndex: 'scn_id',
					text: 'Scn_id'
				},
				{
					xtype: 'gridcolumn',
					dataIndex: 'name',
					text: 'Name'
				},
				{
					xtype: 'gridcolumn',
					dataIndex: 'description',
					text: 'Description'
				},
				{
					xtype: 'gridcolumn',
					dataIndex: 'type',
					text: 'Type'
				},
				{
					xtype: 'gridcolumn',
					dataIndex: 'collection',
					text: 'Collection'
				}
			],
			selModel: Ext.create('Ext.selection.CheckboxModel', {
				showHeaderCheckbox: true,
				listeners: {
					select: {
						fn: me.onCheckboxModelSelect,
						single: true,
						scope: me
					}
				}
			})
		});

		me.callParent(arguments);
	},

	onTextfieldRender: function(component, eOpts) {
		var myForm = component.up('form').getForm();
		new Ext.dd.DropTarget(component.up('form').body.dom.getElementsByClassName('dropTarget')[0],{
			ddGroup:'ddGlobal',
			notifyDrop: function(dds,e,data) {	
				var type = component.up('grid').getDockedItems('toolbar[dock="top"]')[0].down('form').getForm().findField('collection').getValue();
				type = (type == 'inst') ? 'Installation' : ( (type == 'pers') ? 'Person' : ( (type == 'app') ? 'Appliance' : false) );
				if ( !type || dds.dragData.records[0].get('nodeType') != type )
				return false;
				myForm.setValues({ repl_with_id: dds.dragData.records[0].get('id'), repl_with_name: dds.dragData.records[0].get('name')});
			return true; }
		});

	},

	onTextfieldRender11: function(component, eOpts) {
		var myForm = component.up('form').getForm();
		new Ext.dd.DropTarget(component.up('form').body.dom.getElementsByClassName('dropTarget')[0],{
			ddGroup:'ddGlobal',
			notifyDrop: function(dds,e,data) {	
				if (dds.dragData.records[0].get('nodeType') != 'Scenario' )
				return false;
				myForm.setValues({ scn_id: dds.dragData.records[0].get('id'), scn_name: dds.dragData.records[0].get('name')});
			return true; }
		});

	},

	onCheckboxModelSelect: function(rowmodel, record, index, eOpts) {
		var bottom_form = this.getDockedItems('toolbar[dock="bottom"]')[0].down('form');
		if (bottom_form.isHidden())
		bottom_form.show();
	}

});