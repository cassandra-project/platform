/*
 * File: app/view/CsnClusterForm.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.CsnClusterForm', {
	extend: 'Ext.form.Panel',

	bodyPadding: 10,
	title: 'My Form',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'fieldcontainer',
					formBind: false,
					itemId: 'graphContainer',
					defaults: {
						labelWidth: 75,
						width: 250,
						margin: '0 10px 10px 0',
						readOnly: true
					},
					layout: {
						columns: 4,
						type: 'table'
					},
					fieldLabel: 'Graph Parameters',
					items: [
						{
							xtype: 'textfield',
							fieldLabel: 'Graph Type <span style=color:red>*</span>',
							labelWidth: 90,
							name: 'graphType',
							submitValue: false,
							allowBlank: false
						},
						{
							xtype: 'numberfield',
							fieldLabel: 'Minimum Weight',
							name: 'minWeight',
							submitValue: false,
							allowBlank: false
						},
						{
							xtype: 'textfield',
							cls: 'dropTarget',
							fieldLabel: 'Run <span style=color:red>*</span>',
							name: 'run_id',
							submitValue: false,
							readOnly: true
						},
						{
							xtype: 'checkboxfield',
							width: 130,
							fieldLabel: 'No edges',
							name: 'no_edges',
							submitValue: false
						}
					]
				},
				{
					xtype: 'container',
					itemId: 'image_container'
				},
				{
					xtype: 'fieldcontainer',
					formBind: false,
					itemId: 'clusterContainer',
					margin: '20 0 0 0',
					defaults: {
						labelWidth: 75,
						width: 250,
						margin: '0 10px 10px 0'
					},
					layout: {
						columns: 2,
						type: 'table'
					},
					fieldLabel: 'Cluster Parameters',
					items: [
						{
							xtype: 'textfield',
							fieldLabel: 'Name',
							name: 'name'
						},
						{
							xtype: 'combobox',
							fieldLabel: 'Cluster Based On <span style=color:red>*</span>',
							name: 'clusterbasedon',
							allowBlank: false,
							displayField: 'basedonName',
							queryMode: 'local',
							store: 'ClusterBasedonStore',
							valueField: 'basedonTag'
						},
						{
							xtype: 'combobox',
							fieldLabel: 'Cluster Method <span style=color:red>*</span>',
							labelWidth: 75,
							name: 'clustermethod',
							allowBlank: false,
							displayField: 'methodName',
							queryMode: 'local',
							store: 'ClusterMethodStore',
							valueField: 'methodTag'
						},
						{
							xtype: 'numberfield',
							fieldLabel: 'n (number of clusters) <span style=color:red>*</span>',
							name: 'n',
							allowBlank: false,
							allowDecimals: false
						},
						{
							xtype: 'button',
							handler: function(button, event) {
								var myFormCmp = this.up('form');
								var myForm = myFormCmp.getForm();
								var values = myForm.getFieldValues();
								var node = C.app.getNodeFromTree(myForm.getRecord().internalId);
								var record = C.app.getRecordByNode(node);


								if(myForm.isValid()){

									var clusterRecord = {
										'name': values.name,
										'clustermethod' : values.clustermethod,
										'clusterbasedon' : values.clusterbasedon,
										'graph_id': record.get('_id'),
										'n': values.n
									};

									Ext.Ajax.request({
										url: '/cassandra/api/csnclusters',
										jsonData: clusterRecord,
										method: 'POST',
										scope: this,
										success: function(response, opts) {
											var response_obj = Ext.JSON.decode(response.responseText);

											var successMsg = response_obj.message;
											Ext.sliding_box.msg('Success', JSON.stringify(successMsg));
											debugger;
										},
										failure: function(response, opts) {
											var response_obj = Ext.JSON.decode(response.responseText);
											Ext.MessageBox.show({title:'Error', msg: JSON.stringify(response_obj.errors), icon: Ext.MessageBox.ERROR, buttons: Ext.MessageBox.OK}); 
										}
									});

								}

							},
							margin: '20 0 0 0',
							width: 120,
							text: 'Create clusters'
						}
					]
				}
			]
		});

		me.callParent(arguments);
	}

});