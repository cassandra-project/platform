/*
 * File: app/view/CsnClusterForm.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.CsnClusterForm', {
	extend: 'Ext.form.Panel',

	bodyPadding: 10,
	title: 'My Form',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'fieldcontainer',
					formBind: false,
					itemId: 'graphContainer',
					defaults: {
						labelWidth: 75,
						width: 250,
						margin: '0 10px 10px 0',
						readOnly: true
					},
					layout: {
						columns: 4,
						type: 'table'
					},
					fieldLabel: 'Graph Parameters',
					items: [
						{
							xtype: 'textfield',
							fieldLabel: 'Graph Type <span style=color:red>*</span>',
							labelWidth: 90,
							name: 'graphType',
							submitValue: false,
							allowBlank: false
						},
						{
							xtype: 'numberfield',
							fieldLabel: 'Minimum Weight',
							name: 'minWeight',
							submitValue: false,
							allowBlank: false
						},
						{
							xtype: 'textfield',
							cls: 'dropTarget',
							fieldLabel: 'Run <span style=color:red>*</span>',
							name: 'run_id',
							submitValue: false,
							readOnly: true
						},
						{
							xtype: 'checkboxfield',
							width: 130,
							fieldLabel: 'No edges',
							name: 'no_edges',
							submitValue: false
						}
					]
				},
				{
					xtype: 'container',
					itemId: 'image_container',
					style: {
						'text-align': 'center',
						color: '#157fcc'
					},
					width: 700
				},
				{
					xtype: 'displayfield',
					renderer: function(value, displayField) {
						if (value.indexOf('</a>') !== -1) {
							return value;
						}
						if (value.length > 0) {
							var showValueArray = value.split('/');
							var showValue = showValueArray.length > 0 ? showValueArray.pop() : value;
							return '<a href="/cassandra'+value+'" title="'+showValue+'">'+showValue+'</a>';
						}
					},
					anchor: '100%',
					fieldLabel: 'Pajek file',
					name: 'pajek'
				},
				{
					xtype: 'fieldcontainer',
					formBind: false,
					itemId: 'clusterContainer',
					margin: '20 0 0 0',
					defaults: {
						labelWidth: 75,
						width: 250,
						margin: '0 10px 10px 0'
					},
					layout: {
						columns: 2,
						type: 'table'
					},
					fieldLabel: 'Cluster Parameters',
					items: [
						{
							xtype: 'textfield',
							fieldLabel: 'Name',
							name: 'name'
						},
						{
							xtype: 'combobox',
							fieldLabel: 'Cluster Based On <span style=color:red>*</span>',
							name: 'clusterbasedon',
							allowBlank: false,
							displayField: 'basedonName',
							queryMode: 'local',
							store: 'ClusterBasedonStore',
							valueField: 'basedonTag'
						},
						{
							xtype: 'combobox',
							fieldLabel: 'Cluster Method <span style=color:red>*</span>',
							labelWidth: 75,
							name: 'clustermethod',
							allowBlank: false,
							displayField: 'methodName',
							queryMode: 'local',
							store: 'ClusterMethodStore',
							valueField: 'methodTag'
						},
						{
							xtype: 'numberfield',
							fieldLabel: 'n (number of clusters) <span style=color:red>*</span>',
							name: 'n',
							allowBlank: false,
							allowDecimals: false,
							minValue: 0
						},
						{
							xtype: 'button',
							handler: function(button, event) {
								var myFormCmp = this.up('form');
								var myForm = myFormCmp.getForm();
								var values = myForm.getFieldValues();
								var node = C.app.getNodeFromTree(myForm.getRecord().internalId);
								var record = C.app.getRecordByNode(node);


								if(myForm.isValid()){

									var clusterRecord = {
										'name': values.name,
										'clustermethod' : values.clustermethod,
										'clusterbasedon' : values.clusterbasedon,
										'graph_id': record.get('_id'),
										'n': values.n
									};

									/*if (myFormCmp.clusterRecord) {
									clusterRecord._id = myFormCmp.clusterRecord._id;
									clusterRecord.run_id = myFormCmp.clusterRecord.run_id;
									clusterRecord.clusters = myFormCmp.clusterRecord.clusters;
									}*/

									Ext.Ajax.request({
										url: '/cassandra/api/csnclusters',
										jsonData: clusterRecord,
										method: /*myFormCmp.clusterRecord ? 'PUT': */'POST',
										scope: this,
										success: function(response, opts) {
											var response_obj = Ext.JSON.decode(response.responseText);
											var data_obj = /*myFormCmp.clusterRecord ? response_obj.data[0] : */response_obj.data;
											var successMsg = response_obj.message;

											Ext.sliding_box.msg('Success', JSON.stringify(successMsg));

											//update
											myFormCmp.setImageContainerHtml(data_obj.img, "Csn Clusters");
											//update pajek
											myForm.setValues({'pajek': data_obj.pajek});

											if (!myFormCmp.clusterRecord) {
												var clusterGrid = new C.view.ClustersGrid({ 
													plugins: [{
														ptype: 'rowexpander',
														rowBodyTpl : new Ext.XTemplate('<h2>Installations:</h2> {installations_}')
													}], 
													store: new C.store.ClustersStore({storeId : 'clusterStore_' + data_obj._id})
												});
												//add grid to form
												myFormCmp.down("#clusterPricingContainer").insert(0, clusterGrid);
												//check if clusters array has data
											}
											//save current record in form and delete img from record since it is not included in the schema
											myFormCmp.clusterRecord = data_obj;
											delete myFormCmp.clusterRecord.img;

											if (data_obj.clusters.length > 0) {
												//if so populate clusters grid
												myFormCmp.down('grid').store.loadData(data_obj.clusters);
											}
											else {
												//else load empty array
												myFormCmp.down('grid').store.loadData([]);
											}

											//show clusters grid 
											myFormCmp.down("#clusterPricingContainer").show();
										},
										failure: function(response, opts) {
											var response_obj = Ext.JSON.decode(response.responseText);
											Ext.MessageBox.show({title:'Error', msg: JSON.stringify(response_obj.errors), icon: Ext.MessageBox.ERROR, buttons: Ext.MessageBox.OK}); 
										}
									});

								}

							},
							margin: '20 0 0 0',
							width: 120,
							text: 'Create clusters'
						}
					]
				},
				{
					xtype: 'fieldcontainer',
					hidden: true,
					itemId: 'clusterPricingContainer',
					margin: '20 0 0 0',
					width: 100,
					fieldLabel: 'Clusters - Pricing Scheme Correlation',
					items: [
						{
							xtype: 'button',
							handler: function(button, event) {
								var myFormCmp = button.up('form');
								var clusterStore = myFormCmp.down('grid').store;
								var clusterRecord = myFormCmp.clusterRecord;
								var clusters = clusterRecord.clusters;

								Ext.each(clusters, function(cluster){
									var cluster_grid_record = clusterStore.getById(cluster.name);
									if (!cluster_grid_record)
									return;
									cluster.pricing_id = cluster_grid_record.get("pricing_id");
									cluster.base_prc_id = cluster_grid_record.get("base_prc_id");

								});

								Ext.Ajax.request({
									url: '/cassandra/api/csnclusters',
									jsonData: clusterRecord,
									method: 'PUT',
									scope: this,
									success: function(response, opts) {
										var response_obj = Ext.JSON.decode(response.responseText);

										var successMsg = response_obj.message;
										Ext.sliding_box.msg('Success', JSON.stringify(successMsg));
										myFormCmp.clusterRecord = response_obj.data[0];
									},
									failure: function(response, opts) {
										var response_obj = Ext.JSON.decode(response.responseText);
										Ext.MessageBox.show({title:'Error', msg: JSON.stringify(response_obj.errors), icon: Ext.MessageBox.ERROR, buttons: Ext.MessageBox.OK}); 
									}
								});
							},
							margin: '20 0 20 0',
							width: 150,
							text: 'Add pricing schemes'
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	setImageContainerHtml: function(img, graph_desc) {
		html = "<h1>" + graph_desc + " Graph" + "</h1>";
		if (!img) 
		html += "<div id='no_graph_data' class='gridbg'><h1>No " + graph_desc + " Graph Data Available</h1></div>";
		else	
		html += "<img src=/cassandra" + img + " width='600' height='600' alt='graph data'/>";

		this.down("#image_container").update(html);
	}

});