/*
 * File: app/view/PersonForm.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.PersonForm', {
	extend: 'Ext.form.Panel',

	autoScroll: true,
	bodyPadding: 10,
	title: 'My Form',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'container',
					autoScroll: true,
					layout: {
						type: 'anchor'
					},
					items: [
						{
							xtype: 'fieldset',
							padding: '10px',
							width: 400,
							title: 'Properties',
							items: [
								{
									xtype: 'textfield',
									width: 246,
									fieldLabel: 'Name',
									name: 'name',
									listeners: {
										change: {
											fn: me.onTextfieldChange11,
											scope: me
										}
									}
								},
								{
									xtype: 'textfield',
									width: 246,
									fieldLabel: 'Type',
									name: 'type'
								},
								{
									xtype: 'container',
									width: 300,
									layout: {
										align: 'stretch',
										type: 'hbox'
									},
									items: [
										{
											xtype: 'slider',
											flex: 8,
											fieldLabel: 'Sensitivity',
											name: 'sensitivity',
											value: 0.6,
											decimalPrecision: 1,
											keyIncrement: 0.1,
											maxValue: 1,
											listeners: {
												change: {
													fn: me.onSliderChange,
													scope: me
												}
											}
										},
										{
											xtype: 'textfield',
											flex: 1,
											margin: '0 0 0 10',
											fieldLabel: 'Label',
											hideLabel: true,
											name: 'sensitivity_value',
											submitValue: false,
											readOnly: true
										}
									]
								},
								{
									xtype: 'container',
									width: 300,
									layout: {
										align: 'stretch',
										type: 'hbox'
									},
									items: [
										{
											xtype: 'slider',
											flex: 8,
											fieldLabel: 'Awareness',
											name: 'awareness',
											decimalPrecision: 1,
											keyIncrement: 0.1,
											maxValue: 1,
											listeners: {
												change: {
													fn: me.onSliderChange1,
													scope: me
												}
											}
										},
										{
											xtype: 'textfield',
											flex: 1,
											margin: '0 0 0 10',
											fieldLabel: 'Label',
											hideLabel: true,
											name: 'awareness_value',
											submitValue: false,
											readOnly: true
										}
									]
								},
								{
									xtype: 'textareafield',
									width: 246,
									fieldLabel: 'Description',
									name: 'description'
								},
								{
									xtype: 'button',
									itemId: 'btn',
									margin: '10px 0 0 185px',
									width: 70,
									text: 'Update',
									listeners: {
										click: {
											fn: me.onButtonClick2,
											scope: me
										}
									}
								}
							]
						}
					]
				}
			],
			tools: [
				{
					xtype: 'tool',
					type: 'unpin',
					listeners: {
						click: {
							fn: me.onToolClick1,
							scope: me
						}
					}
				}
			]
		});

		me.callParent(arguments);
	},

	onTextfieldChange11: function(field, newValue, oldValue, eOpts) {
		this.setTitle(newValue);
		var node = C.app.getNodeFromTree(this.form.getRecord().internalId);
		node.set({'name':newValue});
	},

	onSliderChange: function(slider, newValue, thumb, eOpts) {
		this.getForm().setValues({sensitivity_value : newValue});
	},

	onSliderChange1: function(slider, newValue, thumb, eOpts) {
		this.getForm().setValues({ awareness_value: newValue });
	},

	onButtonClick2: function(button, e, eOpts) {
		var myForm = this.getForm();
		var node = C.app.getNodeFromTree(myForm.getRecord().internalId);
		var record = C.app.getRecordByNode(node);

		myForm.updateRecord(record);

		this.dirtyForm = false;

		//clear dirty record
		record.node.commit();

		if (record.isNew)
		record.isNew = false;
	},

	onToolClick1: function(tool, e, eOpts) {
		C.app.handleFormUnpin();
	}

});