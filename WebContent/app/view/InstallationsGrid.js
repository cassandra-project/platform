/*
 * File: app/view/InstallationsGrid.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.InstallationsGrid', {
	extend: 'Ext.grid.Panel',

	height: 250,
	width: 400,
	closable: true,
	title: 'My Grid Panel',
	forceFit: false,
	store: 'Installations',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			viewConfig: {

			},
			columns: [
				{
					xtype: 'gridcolumn',
					dataIndex: '_id',
					text: '_id'
				},
				{
					xtype: 'gridcolumn',
					dataIndex: 'name',
					text: 'Name',
					editor: {
						xtype: 'textfield'
					}
				},
				{
					xtype: 'gridcolumn',
					dataIndex: 'type',
					text: 'Type',
					editor: {
						xtype: 'textfield'
					}
				},
				{
					xtype: 'gridcolumn',
					dataIndex: 'description',
					text: 'Description',
					editor: {
						xtype: 'textfield'
					}
				},
				{
					xtype: 'gridcolumn',
					dataIndex: 'scenario_id',
					text: 'Scenario_id'
				},
				{
					xtype: 'gridcolumn',
					dataIndex: 'belongsToInstallation',
					text: 'BelongsToInstallation'
				},
				{
					xtype: 'gridcolumn',
					dataIndex: 'location',
					text: 'Location',
					editor: {
						xtype: 'textfield'
					}
				},
				{
					xtype: 'gridcolumn',
					dataIndex: 'x',
					text: 'x',
					editor: {
						xtype: 'textfield'
					}
				},
				{
					xtype: 'gridcolumn',
					dataIndex: 'x',
					text: 'y',
					editor: {
						xtype: 'textfield'
					}
				}
			],
			plugins: [
				Ext.create('Ext.grid.plugin.RowEditing', {
					ptype: 'rowediting'
				})
			],
			selModel: Ext.create('Ext.selection.RowModel', {
				mode: 'MULTI'
			}),
			dockedItems: [
				{
					xtype: 'toolbar',
					dock: 'top',
					width: 508,
					items: [
						{
							xtype: 'button',
							text: 'New',
							listeners: {
								click: {
									fn: me.onButtonClick,
									scope: me
								}
							}
						},
						{
							xtype: 'button',
							text: 'Delete',
							listeners: {
								click: {
									fn: me.onButtonClick1,
									scope: me
								}
							}
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	onButtonClick: function(button, e, options) {
		console.info('Add clicked.', this, button, e, options);
		var scenario_id = this.store.navigationNode.parentNode.get('id');
		this.store.insert(0, new C.model.Installation({scenario_id: scenario_id}));
		this.plugins[0].startEdit(0, 0);
	},

	onButtonClick1: function(button, e, options) {
		console.info('Delete clicked.', this, button, e, options);

		var selection = this.getView().getSelectionModel().getSelection();
		if (selection) {
			this.store.remove(selection);	
		}
	}

});