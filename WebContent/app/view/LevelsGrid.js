/*
 * File: app/view/LevelsGrid.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.LevelsGrid', {
	extend: 'Ext.grid.Panel',

	maxHeight: 400,
	autoScroll: true,
	title: 'Levels',
	forceFit: true,
	store: 'LevelsStore',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			viewConfig: {
				minHeight: 70
			},
			columns: [
				{
					xtype: 'numbercolumn',
					dataIndex: 'order',
					text: 'Order',
					format: '0,000',
					editor: {
						xtype: 'numberfield',
						allowDecimals: false,
						minValue: 0
					}
				},
				{
					xtype: 'numbercolumn',
					dataIndex: 'price',
					text: 'Price',
					editor: {
						xtype: 'numberfield'
					}
				},
				{
					xtype: 'numbercolumn',
					dataIndex: 'level',
					text: 'Level',
					editor: {
						xtype: 'numberfield'
					}
				}
			],
			dockedItems: [
				{
					xtype: 'toolbar',
					dock: 'top',
					width: 508,
					items: [
						{
							xtype: 'button',
							text: 'New',
							listeners: {
								click: {
									fn: me.onButtonClick2,
									scope: me
								}
							}
						},
						{
							xtype: 'button',
							text: 'Delete',
							listeners: {
								click: {
									fn: me.onButtonClick12,
									scope: me
								}
							}
						}
					]
				}
			],
			plugins: [
				Ext.create('Ext.grid.plugin.RowEditing', {
					clicksToMoveEditor: 1
				})
			]
		});

		me.callParent(arguments);
	},

	onButtonClick2: function(button, e, eOpts) {

		this.store.insert(0, {price:0, level : 0});
		this.plugins[0].startEdit(0, 0);




	},

	onButtonClick12: function(button, e, eOpts) {
		console.info('Delete clicked.', this, button, e, eOpts);

		var selections = this.getView().getSelectionModel().getSelection();
		this.store.remove(selections);

	}

});