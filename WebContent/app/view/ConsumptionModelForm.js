/*
 * File: app/view/ConsumptionModelForm.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.ConsumptionModelForm', {
	extend: 'Ext.form.Panel',

	height: 388,
	width: 588,
	layout: {
		align: 'middle',
		type: 'hbox'
	},
	bodyPadding: 10,
	closable: true,
	title: 'My Form',

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'fieldset',
					flex: 1,
					height: 318,
					maxWidth: 300,
					padding: '10px',
					width: 300,
					layout: {
						type: 'auto'
					},
					title: 'Properties:',
					items: [
						{
							xtype: 'textfield',
							margin: '10px 0',
							width: 246,
							name: 'name',
							fieldLabel: 'Name'
						},
						{
							xtype: 'textareafield',
							margin: '10px 0',
							width: 246,
							name: 'description',
							fieldLabel: 'Description'
						},
						{
							xtype: 'textareafield',
							height: 64,
							width: 246,
							name: 'expression',
							fieldLabel: 'Expression'
						},
						{
							xtype: 'button',
							margin: '10px 0 0 190px',
							text: 'Update',
							listeners: {
								click: {
									fn: me.onButtonClick2,
									scope: me
								}
							}
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	onButtonClick2: function(button, e, options) {
		var model = [];
		var myForm = this.getForm();
		var record = myForm.getRecord(),
		values = myForm.getFieldValues();
		/*console.info(record, this.query('grid')[0].store.data);
		var gridData = this.query('grid')[0].store.data;

		Ext.each(gridData.items, function(index){
		properties.push(index.data);

		});

		params[0] = { n: values.params_n, values: properties};
		model = { n: values.model_n, params: params};

		console.info(model,'model');*/
		model = JSON.parse(myForm.getFieldValues().expression);
		record.set('model', model);

		myForm.updateRecord();
		//record.save();
	}

});