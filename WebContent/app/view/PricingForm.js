/*
 * File: app/view/PricingForm.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.PricingForm', {
	extend: 'Ext.form.Panel',

	autoScroll: true,
	layout: {
		type: 'auto'
	},
	bodyPadding: 20,

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			defaults: {
				width: 700
			},
			items: [
				{
					xtype: 'fieldset',
					frame: false,
					padding: 10,
					width: 300,
					title: 'Properties',
					items: [
						{
							xtype: 'textfield',
							width: 246,
							fieldLabel: 'Name',
							name: 'name',
							listeners: {
								change: {
									fn: me.onTextfieldChange11,
									scope: me
								}
							}
						},
						{
							xtype: 'combobox',
							width: 246,
							fieldLabel: 'Type <span style=color:red>*</span>',
							name: 'type',
							allowBlank: false,
							displayField: 'pricingTypeName',
							queryMode: 'local',
							store: 'PricingTypeStore',
							valueField: 'pricingTypeTag',
							listeners: {
								change: {
									fn: me.onComboboxChange,
									scope: me
								}
							}
						},
						{
							xtype: 'textareafield',
							width: 246,
							fieldLabel: 'Description',
							name: 'description'
						},
						{
							xtype: 'numberfield',
							width: 246,
							fieldLabel: 'Billing </br>Cycle',
							name: 'billingCycle',
							allowDecimals: false
						},
						{
							xtype: 'numberfield',
							width: 246,
							fieldLabel: 'Fixed </br>Charge',
							name: 'fixedCharge'
						},
						{
							xtype: 'numberfield',
							itemId: 'offpeakPrice',
							width: 246,
							fieldLabel: 'Offpeak </br>Price',
							name: 'offpeakPrice'
						}
					]
				},
				{
					xtype: 'fieldset',
					itemId: 'ScalarEnergyPricing',
					padding: 20,
					layout: {
						type: 'auto'
					},
					title: 'Extra Parameters'
				},
				{
					xtype: 'fieldset',
					hidden: true,
					itemId: 'ScalarEnergyPricingTimeZones',
					padding: 20,
					title: 'Extra Parameters'
				},
				{
					xtype: 'fieldset',
					hidden: true,
					itemId: 'EnergyPowerPricing',
					defaults: {
						margin: '0 20 0 0'
					},
					layout: {
						align: 'stretch',
						padding: 20,
						type: 'hbox'
					},
					title: 'Extra Parameters',
					items: [
						{
							xtype: 'numberfield',
							width: 200,
							fieldLabel: 'Contracted Capacity',
							labelWidth: 60,
							name: 'contractedCapacity'
						},
						{
							xtype: 'numberfield',
							width: 200,
							fieldLabel: 'Energy Price',
							labelWidth: 60,
							name: 'energyPrice'
						},
						{
							xtype: 'numberfield',
							width: 200,
							fieldLabel: 'Power Price',
							labelWidth: 60,
							name: 'powerPrice'
						}
					]
				},
				{
					xtype: 'fieldset',
					hidden: true,
					itemId: 'MaximumPowerPricing',
					defaults: {
						margin: '0 20 0 0'
					},
					layout: {
						align: 'stretch',
						padding: 20,
						type: 'hbox'
					},
					title: 'Extra Parameters',
					items: [
						{
							xtype: 'numberfield',
							width: 200,
							fieldLabel: 'Energy Price',
							labelWidth: 60,
							name: 'energyPrice2'
						},
						{
							xtype: 'numberfield',
							width: 200,
							fieldLabel: 'Power Price',
							labelWidth: 60,
							name: 'powerPrice2'
						}
					]
				},
				{
					xtype: 'fieldset',
					hidden: true,
					itemId: 'AllInclusivePricing',
					defaults: {
						margin: '0 20 0 0'
					},
					layout: {
						align: 'stretch',
						padding: 20,
						type: 'hbox'
					},
					title: 'Extra Parameters',
					items: [
						{
							xtype: 'numberfield',
							width: 200,
							fieldLabel: 'Contracted Energy',
							labelWidth: 60,
							name: 'contractedEnergy',
							allowDecimals: false
						},
						{
							xtype: 'numberfield',
							width: 200,
							fieldLabel: 'Fixed Cost',
							labelWidth: 60,
							name: 'fixedCost'
						},
						{
							xtype: 'numberfield',
							width: 200,
							fieldLabel: 'Additional Cost',
							labelWidth: 60,
							name: 'additionalCost'
						}
					]
				},
				{
					xtype: 'fieldset',
					itemId: 'TOUPricing',
					padding: 20,
					layout: {
						type: 'auto'
					},
					title: 'Extra Parameters',
					items: [
						{
							xtype: 'numberfield',
							formBind: false,
							width: 200,
							fieldLabel: 'Onekw24',
							labelWidth: 60,
							name: 'onekw24',
							readOnly: true,
							decimalPrecision: 4
						}
					]
				},
				{
					xtype: 'button',
					itemId: 'btn',
					margin: '10px 120px',
					width: 70,
					text: 'Update',
					listeners: {
						click: {
							fn: me.onButtonClick1,
							scope: me
						}
					}
				}
			],
			tools: [
				{
					xtype: 'tool',
					type: 'unpin',
					listeners: {
						click: {
							fn: me.onToolClick11,
							scope: me
						}
					}
				}
			]
		});

		me.callParent(arguments);
	},

	onTextfieldChange11: function(field, newValue, oldValue, eOpts) {
		this.setTitle(newValue);
		var node = C.app.getNodeFromTree(this.form.getRecord().internalId);
		node.set({'name':newValue});
	},

	onComboboxChange: function(field, newValue, oldValue, eOpts) {
		Ext.each(this.items.items, function(item, index){
			if (index > 0 && item.xtype != 'button')
			item.hide();
		});

		this.getComponent(newValue).show();

		if (newValue == 'ScalarEnergyPricingTimeZones')
		this.down('#offpeakPrice').show();
		else
		this.down('#offpeakPrice').hide();
	},

	onButtonClick1: function(button, e, eOpts) {
		var levels = [];
		var offpeak = []; 
		var levelsData = [];
		var timezones = [];
		var myForm = this.getForm();
		var node = C.app.getNodeFromTree(myForm.getRecord().internalId);
		var record = C.app.getRecordByNode(node);
		var values = myForm.getValues();

		switch (values.type) {
			case 'ScalarEnergyPricing':
			levelsData = this.query('grid')[0].store.data;
			Ext.each(levelsData.items, function(index){
				levels.push(index.data);
			});
			break;
			case 'ScalarEnergyPricingTimeZones':
			levelsData = this.query('grid')[1].store.data;
			Ext.each(levelsData.items, function(index){
				levels.push(index.data);
			});
			var offpeakData =  this.query('grid')[2].store.data;
			Ext.each(offpeakData.items, function(index){
				offpeak.push(index.data);
			});
			break;
			case 'TOUPricing':
			var timezonesData = this.query('grid')[3].store.data;
			Ext.each(timezonesData.items, function(index){
				timezones.push(index.data);
			});
			record.store.on('write', function (store, operation, eOpts) {
				myForm.loadRecord(operation.getRecords()[0]);
			}, null, {single: true});
				break;
			}

			record.set({
				'name' : values.name,
				'type' : values.type,
				'description' : values.description,
				'billingCycle' : values.billingCycle,
				'fixedCharge' : values.fixedCharge,
				'offpeakPrice' : values.offpeakPrice,
				'levels' : levels,
				'offpeak' : offpeak,
				'contractedCapacity' : (values.type == 'EnergyPowerPricing') ? values.contractedCapacity : 0,
				'energyPrice' : (values.type == 'EnergyPowerPricing') ? values.energyPrice : (values.type == 'MaximumPowerPricing') ? values.energyPrice2 : 0,
				'powerPrice' : (values.type == 'EnergyPowerPricing')  ? values.powerPrice : (values.type == 'MaximumPowerPricing') ?  values.powerPrice2 : 0,
				'contractedEnergy' : (values.type == 'AllInclusivePricing') ? values.contractedEnergy : 0,
				'fixedCost' : (values.type == 'AllInclusivePricing') ? values.fixedCost : 0,
				'additionalCost' : (values.type == 'AllInclusivePricing') ? values.additionalCost : 0,
				'timezones': timezones
			});

			this.dirtyForm = false;
			//clear dirty record
			record.node.commit();

			if (record.isNew)
			record.isNew = false;
			//record.save();
	},

	onToolClick11: function(tool, e, eOpts) {
		C.app.handleFormUnpin();
	}

});