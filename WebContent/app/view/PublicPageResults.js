/*
 * File: app/view/PublicPageResults.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.PublicPageResults', {
	extend: 'Ext.panel.Panel',

	autoScroll: true,
	layout: {
		align: 'center',
		type: 'vbox'
	},

	initComponent: function() {
		var me = this;

		Ext.applyIf(me, {
			listeners: {
				afterrender: {
					fn: me.onContainerAfterRender,
					scope: me
				}
			},
			dockedItems: [
				{
					xtype: 'tabpanel',
					dock: 'top',
					height: 40,
					activeTab: 0,
					items: [
						{
							xtype: 'panel',
							itemId: 'hour',
							title: 'Hour'
						},
						{
							xtype: 'panel',
							itemId: 'day',
							title: 'Day'
						},
						{
							xtype: 'panel',
							itemId: 'week',
							title: 'Week'
						},
						{
							xtype: 'panel',
							itemId: 'month',
							title: 'Month'
						}
					],
					listeners: {
						tabchange: {
							fn: me.onTabpanelTabChange,
							scope: me
						}
					}
				}
			],
			items: [
				{
					xtype: 'container',
					itemId: 'publicPageResultsWrapper',
					width: 750,
					items: [
						{
							xtype: 'container',
							itemId: 'firstRow',
							layout: {
								align: 'middle',
								type: 'hbox'
							},
							items: [
								{
									xtype: 'container',
									flex: 2,
									itemId: 'totalConsumptionPlot',
									layout: {
										align: 'stretch',
										type: 'vbox'
									},
									items: [
										{
											xtype: 'label',
											flex: 0,
											margins: '17px 0',
											id: 'total_energy_plot_title',
											itemId: 'total_energy_plot_title',
											style: 'font-size:18px;text-align:center;color: rgb(17, 95, 166);',
											text: 'Total Energy Consumption for Whole House '
										},
										{
											xtype: 'chart',
											height: 240,
											id: 'total_energy_plot',
											width: 400,
											animate: true,
											insetPadding: 20,
											store: 'PublicConsumptionPlotStore',
											theme: 'Sky',
											axes: [
												{
													type: 'Category',
													fields: [
														'x'
													],
													title: '',
													position: 'bottom'
												},
												{
													type: 'Numeric',
													fields: [
														'y'
													],
													title: 'Consumption (kWh)',
													position: 'left'
												}
											],
											series: [
												{
													type: 'column',
													label: {
														display: 'insideEnd',
														field: 'y',
														color: '#333',
														'text-anchor': 'middle'
													},
													xField: 'x',
													yField: 'y'
												}
											]
										}
									]
								},
								{
									xtype: 'container',
									flex: 1,
									itemId: 'energyAndPower',
									layout: {
										align: 'center',
										type: 'vbox'
									},
									items: [
										{
											xtype: 'container',
											cls: 'energyPowerBtnContainer',
											items: [
												{
													xtype: 'button',
													cls: 'energyPowerBtn',
													itemId: 'powerBtn',
													style: 'border-top-radius: 0',
													scale: 'medium',
													text: 'Power',
													listeners: {
														click: {
															fn: me.onPowerBtnClick,
															scope: me
														}
													}
												},
												{
													xtype: 'button',
													cls: 'energyPowerBtn energyPowerBtnSelected',
													itemId: 'energyBtn',
													scale: 'medium',
													text: 'Energy',
													listeners: {
														click: {
															fn: me.onEnergyBtnClick,
															scope: me
														}
													}
												}
											]
										},
										{
											xtype: 'chart',
											height: 239,
											width: 250,
											animate: true,
											insetPadding: 20,
											store: 'PublicConsumptionComparisonStore',
											axes: [
												{
													type: 'Category',
													fields: [
														'name'
													],
													position: 'bottom'
												},
												{
													type: 'Numeric',
													fields: [
														'value'
													],
													hidden: true,
													position: 'left'
												}
											],
											series: [
												{
													type: 'column',
													label: {
														display: 'insideEnd',
														field: 'value',
														color: '#333',
														'text-anchor': 'middle'
													},
													xField: 'name',
													yField: 'value'
												}
											]
										}
									]
								}
							]
						},
						{
							xtype: 'label',
							style: 'font-size:15px;text-align:center;color: rgb(17, 95, 166);',
							text: 'Consumption Categories'
						},
						{
							xtype: 'container',
							itemId: 'secondRow',
							margin: 10,
							layout: {
								align: 'middle',
								pack: 'center',
								type: 'hbox'
							},
							items: [
								{
									xtype: 'gridpanel',
									flex: 1,
									id: 'publicResultsGrid',
									itemId: '',
									maxHeight: 200,
									maxWidth: 350,
									minWidth: 350,
									width: 350,
									autoScroll: true,
									store: 'PublicEntityConsumptionStore',
									selModel: Ext.create('Ext.selection.RowModel', {
										listeners: {
											select: {
												fn: me.onRowModelSelect,
												scope: me
											}
										}
									}),
									columns: [
										{
											xtype: 'gridcolumn',
											dataIndex: 'name',
											text: 'Name',
											flex: 1.5
										},
										{
											xtype: 'gridcolumn',
											dataIndex: 'type',
											text: 'Type',
											flex: 1
										},
										{
											xtype: 'numbercolumn',
											dataIndex: 'consumption',
											text: 'Consumption',
											flex: 1.5
										}
									]
								},
								{
									xtype: 'chart',
									flex: 1,
									height: 200,
									maxWidth: 350,
									width: 350,
									animate: true,
									insetPadding: 20,
									store: 'PublicPieChartStore',
									series: [
										{
											type: 'pie',
											label: {
												field: 'name',
												display: 'rotate',
												contrast: true,
												font: '12px Arial',
												renderer: function(value, label, storeItem) {
													return storeItem.get('consumptionPercentage') + '%';
												}
											},
											showInLegend: true,
											angleField: 'consumptionPercentage'
										}
									],
									legend: {
										position: 'right'
									}
								}
							]
						},
						{
							xtype: 'label',
							margin: '10 0 5 0',
							style: 'font-size:15px;text-align:center;color: rgb(17, 95, 166);',
							text: 'Your Whole House compared with other houses in your group'
						},
						{
							xtype: 'container',
							itemId: 'thirdRow',
							layout: {
								align: 'middle',
								pack: 'center',
								type: 'hbox'
							},
							items: [
								{
									xtype: 'container',
									itemId: 'gaugeAndLegend',
									width: 400,
									layout: {
										align: 'center',
										type: 'vbox'
									},
									items: [
										{
											xtype: 'container',
											getGaugeChart: function(record) {
												if (!record) {

													return false;
												}

												var gaugeStore = Ext.getStore('DummyGaugeStore');
												gaugeStore.loadData([{'you' : record.get('consumption')}]);

												return new Ext.chart.Chart({
													xtype: 'chart',
													itemId: 'gaugeChart',
													maxWidth: 400,
													minWidth: 400,
													width: 400,
													maxHeight: 190,
													height: 190,
													flex: 1,
													animate: {
														easing: 'elasticIn',
														duration: 1000
													},
													insetPadding: 35,
													store: gaugeStore,
													axes : [{
														type: 'kpigauge',
														position: 'left',
														minimum: 0,
														maximum: record.get('inefficient'),
														steps: 10,
														margin: 0,
														hidden: true
													}],
													series : [{
														type: 'kpigauge',
														field: 'you',
														needle: {
															width: 4,
															pivotFill: 'rgb(17, 95, 166)',
															pivotRadius: 5
														},
														ranges: [{
															from: 0,
															to: record.get('efficient'),
															color: 'rgb(148, 174, 10)'
														}, {
															from: record.get('efficient'),
															to: record.get('average'),
															color: 'rgb(255, 209, 62)'
														}, {
															from: record.get('average'),
															to: record.get('inefficient'),
															color: 'rgb(166, 17, 32)'
														}]
													}]
												});
											},
											flex: 1,
											itemId: 'gaugeContainer'
										},
										{
											xtype: 'container',
											html: '<span class="efficient box"></span>Efficient<span class="average box"></span>Average<span class="inefficient box"></span>Inefficient<span class="you box"></span>You',
											itemId: 'gaugeLegend'
										}
									]
								},
								{
									xtype: 'container',
									flex: 1,
									itemId: 'tipsAndFacts',
									maxHeight: 207,
									minHeight: 50,
									padding: 10,
									style: 'border: 3px solid rgb(148, 174, 10); color: rgb(148, 174, 10);',
									autoScroll: true
								}
							]
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	onContainerAfterRender: function(component, eOpts) {
		var publicResultsStore = Ext.getStore('PublicResultsStore');

		var params = Ext.urlDecode(location.search.substring(1));
		Ext.apply(publicResultsStore.getProxy().extraParams, {
			inst_id: params.inst_id
		});

		publicResultsStore.load();
	},

	onTabpanelTabChange: function(tabPanel, newCard, oldCard, eOpts) {
		var store = Ext.getStore('PublicResultsStore');
		store.proxy.extraParams.timeRange = newCard.itemId;
		store.load();
	},

	onPowerBtnClick: function(button, e, eOpts) {
		button.up().down('#energyBtn').removeCls('energyPowerBtnSelected');
		button.addCls('energyPowerBtnSelected');

		var store = Ext.getStore('PublicResultsStore');
		store.proxy.extraParams.unit = 'w';
		store.load();

	},

	onEnergyBtnClick: function(button, e, eOpts) {
		button.up().down('#powerBtn').removeCls('energyPowerBtnSelected');
		button.addCls('energyPowerBtnSelected');

		var store = Ext.getStore('PublicResultsStore');
		store.proxy.extraParams.unit = 'kwh';
		store.load();

	},

	onRowModelSelect: function(rowmodel, record, index, eOpts) {
		var gaugeChart = this.down('#gaugeContainer').getGaugeChart(record);

		if (gaugeChart) {
			this.down('#gaugeContainer').removeAll();
			this.down('#gaugeContainer').add(gaugeChart);
		}

		this.down('#tipsAndFacts').update(record.get('description'));

		this.down('#gaugeLegend').focus();



	}

});