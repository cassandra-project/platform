/*
 * File: app/view/ResultsGraphForm.js
 *
 * This file was generated by Sencha Architect version 2.2.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('C.view.ResultsGraphForm', {
	extend: 'Ext.form.Panel',

	autoScroll: true,
	layout: {
		align: 'center',
		type: 'hbox'
	},
	bodyPadding: 10,
	title: 'My Form',
	standardSubmit: false,

	initComponent: function() {
		var me = this;

		me.initialConfig = Ext.apply({
			standardSubmit: false
		}, me.initialConfig);

		Ext.applyIf(me, {
			items: [
				{
					xtype: 'container',
					flex: 2,
					itemId: 'plotContainer',
					layout: {
						align: 'stretch',
						type: 'vbox'
					},
					items: [
						{
							xtype: 'fieldset',
							flex: 1,
							padding: '10px',
							title: 'Plot Parameters',
							items: [
								{
									xtype: 'fieldcontainer',
									cls: 'idContainer',
									height: 27,
									itemId: 'instFieldContainer',
									layout: {
										align: 'stretch',
										type: 'hbox'
									},
									items: [
										{
											xtype: 'textfield',
											cls: 'dropTarget',
											width: 246,
											fieldLabel: 'Installation',
											name: 'inst_id',
											listeners: {
												render: {
													fn: me.onTextfieldRender,
													scope: me
												}
											}
										},
										{
											xtype: 'label',
											margins: '0 10px',
											height: 30,
											style: 'font-size:11px; font-style:italic;\r\n',
											width: 191,
											text: 'Drop an installation here to view it\'s consumption'
										}
									]
								},
								{
									xtype: 'combobox',
									width: 246,
									fieldLabel: 'Metric (power)',
									name: 'metric',
									displayField: 'metric_disp',
									queryMode: 'local',
									store: 'MetricStore',
									valueField: 'metric'
								},
								{
									xtype: 'numberfield',
									width: 246,
									fieldLabel: 'Aggregation unit',
									name: 'aggr_unit',
									allowDecimals: false,
									minValue: 1
								},
								{
									xtype: 'numberfield',
									width: 246,
									fieldLabel: 'Start tick (minute)',
									name: 'from',
									allowDecimals: false
								},
								{
									xtype: 'numberfield',
									width: 246,
									fieldLabel: 'End tick (minute)',
									name: 'to',
									allowDecimals: false
								},
								{
									xtype: 'button',
									itemId: 'btn',
									margin: '10px 0 0 120px',
									width: 119,
									text: 'Refresh Graph',
									listeners: {
										click: {
											fn: me.onButtonClick2,
											scope: me
										}
									}
								}
							]
						},
						{
							xtype: 'label',
							flex: 0,
							margins: '10px 0',
							itemId: 'plot_title',
							style: 'font-size:20px;font-weight:bold;',
							text: 'Total Consumption Active Power'
						},
						{
							xtype: 'label',
							flex: 0,
							margins: '10px 0',
							itemId: 'expected_plot_title',
							style: 'font-size:20px;font-weight:bold;',
							text: 'Expected Active Power'
						}
					]
				},
				{
					xtype: 'panel',
					flex: 1,
					id: 'pieChartContainer2',
					itemId: 'pieChartContainer2',
					margin: '0 0 0 20px',
					minHeight: 500,
					width: 250,
					layout: {
						align: 'center',
						padding: '10px',
						type: 'vbox'
					},
					items: [
						{
							xtype: 'chart',
							border: 1,
							height: 229,
							itemId: 'resultsActivityPieChart',
							width: 338,
							shadow: true,
							animate: true,
							store: 'ResultsActivityStore',
							series: [
								{
									type: 'pie',
									highlight: {
										segment: {
											margin: 20
										}
									},
									label: {
										field: 'type',
										display: 'rotate',
										contrast: true,
										font: '12px Arial',
										renderer: function(v) {
										  return Ext.String.ellipsis(v, 12, false);
										}
									},
									showInLegend: true,
									tips: {
										trackMouse: true,
										width: 150,
										height: 28,
										renderer: function(storeItem, item) {
										//calculate percentage.
										var total = 0;
										storeItem.store.each(function(rec) {
											total += rec.get('consumption');
										});
										this.setTitle(storeItem.get('type') + ': ' + Math.round(storeItem.get('consumption') / total * 100) + '%');
									  }
									},
									angleField: 'consumption',
									highlightDuration: 200
								}
							],
							legend: {
								position: 'right'
							}
						},
						{
							xtype: 'label',
							flex: 1,
							width: 162,
							text: 'Pie Chart 1: Consumption per Activity Type'
						},
						{
							xtype: 'chart',
							border: 1,
							height: 229,
							itemId: 'resultsAppliancePieChart',
							width: 338,
							shadow: true,
							animate: true,
							store: 'ResultsApplianceStore',
							series: [
								{
									type: 'pie',
									highlight: {
										segment: {
											margin: 20
										}
									},
									label: {
										field: 'type',
										display: 'rotate',
										contrast: true,
										font: '12px Arial',
										renderer: function(v) {
										  return Ext.String.ellipsis(v, 12, false);
										}
									},
									showInLegend: true,
									tips: {
										trackMouse: true,
										width: 150,
										height: 28,
										renderer: function(storeItem, item) {
										//calculate percentage.
										var total = 0;
										storeItem.store.each(function(rec) {
											total += rec.get('consumption');
										});
										this.setTitle(storeItem.get('type') + ': ' + Math.round(storeItem.get('consumption') / total * 100) + '%');
									  }
									},
									angleField: 'consumption',
									highlightDuration: 200
								}
							],
							legend: {
								position: 'right'
							}
						},
						{
							xtype: 'label',
							flex: 1,
							width: 162,
							text: 'Pie Chart 2: Consumption per Appliance Type'
						}
					]
				}
			]
		});

		me.callParent(arguments);
	},

	onTextfieldRender: function(component, eOpts) {
		myForm = this.getForm();
		new Ext.dd.DropTarget(this.body.dom.getElementsByClassName('dropTarget')[0],{
			ddGroup:'ddGlobal',
			notifyDrop: function(dds,e,data) {	
				if (dds.dragData.records[0].get('nodeType') !== 'Installation' ) {
					return false;
				}
				myForm.setValues({ 'inst_id': dds.dragData.records[0].get('id')});
			return true; }
		});

	},

	onButtonClick2: function(button, e, eOpts) {
		var myForm = this.getForm();
		this.dirtyForm = false;
		var formValues = myForm.getValues();
		var myResultsStore = this.query('#resultsChart')[0].store;
		var expectedStore = this.query('#expectedChart')[0].store;
		var expectedLoadParams = {}; 
		var powerType = (formValues.metric == 'q') ? 'Reactive' : 'Active';
		var chartTitle = 'Consumption ' + powerType + ' Power';

		if (!formValues.inst_id) {
			delete formValues.inst_id;
			this.query('#plot_title')[0].setText('Total ' + chartTitle);
			this.query('#expected_plot_title')[0].setText('Expected Active Power');
		}
		else {
			this.query('#plot_title')[0].setText('Installation ' + chartTitle);
			this.query('#expected_plot_title')[0].setText('Installation Expected Active Power');
			this.down('grid').store.load({params:{'inst_id':  formValues.inst_id}});
			expectedLoadParams = { params: {inst_id : formValues.inst_id} };
		}

		var defaultAggrUnit = (formValues.aggr_unit)? formValues.aggr_unit : myResultsStore.proxy.reader.jsonData.aggregationUnit;  
		if (!formValues.aggr_unit) 
		delete formValues.aggr_unit;
		defaultAggrUnit = parseInt(defaultAggrUnit);

		var defaultFrom = (formValues.from) ? formValues.from : 0;
		defaultFrom = parseInt(defaultFrom);
		if (!formValues.from) 
		delete formValues.from;

		var numberOfDays = myResultsStore.proxy.reader.jsonData.numberOfDays;
		var dataSize = parseInt(-defaultFrom/defaultAggrUnit) + parseInt( (numberOfDays*1440) / defaultAggrUnit);

		if (!formValues.to) 
		delete formValues.to;

		if ( dataSize > 1000 ) {
			Ext.MessageBox.alert('Error', 'Too many plot data! Chart will not be loaded!'); 
			return false;
		}
		else if (dataSize > 500)
		Ext.MessageBox.alert('Warning', 'Too many plot data! Chart may not be loaded properly!'); 


		myResultsStore.load( {params: formValues});
		expectedStore.load(expectedLoadParams);
		Ext.getStore('ResultsPieChartsStore').load(expectedLoadParams);
		//TODO better impementation. Ignore all empty fields
	}

});